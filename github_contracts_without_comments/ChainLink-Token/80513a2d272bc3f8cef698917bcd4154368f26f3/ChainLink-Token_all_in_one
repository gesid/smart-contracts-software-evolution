pragma solidity ^0.4.11;


import ;
import ;
import ;


contract standard223token is erc223, standardtoken {

  function transfer(address _to, uint _value, bytes _data)
  public returns (bool success)
  {
    super.transfer(_to, _value);
    transfer(msg.sender, _to, _value, _data);
    if (iscontract(_to)) {
      contractfallback(_to, _value, _data);
    }
    return true;
  }

  function transfer(address _to, uint _value)
  public returns (bool success)
  {
    return transfer(_to, _value, new bytes(0));
  }

  

  function contractfallback(address _to, uint _value, bytes _data)
  private
  {
    erc223receiver reciever = erc223receiver(_to);
    reciever.tokenfallback(msg.sender, _value, _data);
  }

  function iscontract(address _addr)
  private returns (bool iscontract)
  {
    uint length;
    assembly { length := extcodesize(_addr) }
    return length > 0;
  }
}

pragma solidity ^0.4.11;


import ;
import ;


contract linktoken is standard223token {

  uint public constant totalsupply = 10**27;
  string public constant name = ;
  uint8 public constant decimals = 18;
  string public constant symbol = ;

  function linktoken()
  public
  {
    balances[msg.sender] = totalsupply;
  }

  
  function transfer(address _to, uint _value)
  public validrecipient(_to) returns (bool success)
  {
    super.transfer(_to, _value);
  }


  

  modifier validrecipient(address _recipient) {
    require(_recipient != address(0));
    _;
  }

}

pragma solidity ^0.4.8;


contract erc223receiver {
  function tokenfallback(address _sender, uint _value, bytes _data) returns (bool success);
}

pragma solidity ^0.4.11;


import ;



contract erc20 is erc20basic {
  function allowance(address owner, address spender) constant returns (uint256);
  function transferfrom(address from, address to, uint256 value) returns (bool);
  function approve(address spender, uint256 value) returns (bool);
  event approval(address indexed owner, address indexed spender, uint256 value);
}

pragma solidity ^0.4.8;

import ;

contract erc223 is erc20 {
  function transfer(address to, uint value, bytes data) returns (bool success);

  event transfer(address indexed from, address indexed to, uint value, bytes data);
}

pragma solidity ^0.4.11;


import ;
import ;



contract basictoken is erc20basic {
  using safemath for uint256;

  mapping(address => uint256) balances;

  
  function transfer(address _to, uint256 _value) returns (bool) {
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    transfer(msg.sender, _to, _value);
    return true;
  }

  
  function balanceof(address _owner) constant returns (uint256 balance) {
    return balances[_owner];
  }

}

pragma solidity ^0.4.11;


import ;
import ;



contract standardtoken is erc20, basictoken {

  mapping (address => mapping (address => uint256)) allowed;


  
  function transferfrom(address _from, address _to, uint256 _value) returns (bool) {
    var _allowance = allowed[_from][msg.sender];

    
    

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = _allowance.sub(_value);
    transfer(_from, _to, _value);
    return true;
  }

  
  function approve(address _spender, uint256 _value) returns (bool) {

    
    
    
    
    require((_value == 0) || (allowed[msg.sender][_spender] == 0));

    allowed[msg.sender][_spender] = _value;
    approval(msg.sender, _spender, _value);
    return true;
  }

  
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }
  
    
  function increaseapproval (address _spender, uint _addedvalue) 
    returns (bool success) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedvalue);
    approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  function decreaseapproval (address _spender, uint _subtractedvalue) 
    returns (bool success) {
    uint oldvalue = allowed[msg.sender][_spender];
    if (_subtractedvalue > oldvalue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldvalue.sub(_subtractedvalue);
    }
    approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

}

pragma solidity ^0.4.11;



contract erc20basic {
  uint256 public totalsupply;
  function balanceof(address who) constant returns (uint256);
  function transfer(address to, uint256 value) returns (bool);
  event transfer(address indexed from, address indexed to, uint256 value);
}

pragma solidity ^0.4.8;


contract token223receivermock {
    address public tokensender;
    uint public sentvalue;
    bytes public tokendata;
    bool public calledfallback = false;

    function tokenfallback(address _sender, uint _value, bytes _data)
    public returns (bool success) {
      calledfallback = true;

      tokensender = _sender;
      sentvalue = _value;
      tokendata = _data;
      return true;
    }

}

pragma solidity ^0.4.8;


import ;



contract basictokenmock is basictoken {

  function basictokenmock(address initialaccount, uint initialbalance)
  {
    balances[initialaccount] = initialbalance;
    totalsupply = initialbalance;
  }

}

pragma solidity ^0.4.11;


import ;


contract token223 is standard223token {
    string public constant name = ;
    string public constant symbol = ;
    uint8 public constant decimals = 18;
    uint256 public totalsupply;

    function token223(uint _initialbalance)
    {
        balances[msg.sender] = _initialbalance;
        totalsupply = _initialbalance;
    }
}

pragma solidity ^0.4.11;


import ;


contract linkreceiver {

  bool public fallbackcalled;
  bool public calldatacalled;
  uint public tokensreceived;
  uint public lasttransferamount;
  address public lasttransfersender;


  function tokenfallback(address _from, uint _amount, bytes _data)
  public returns (bool success) {
    fallbackcalled = true;
    if (_data.length > 0) {
      require(address(this).delegatecall(_data, msg.sender, _from, _amount));
    }
    return true;
  }

  function callbackwithoutwithdrawl() {
    calldatacalled = true;
  }

  function callbackwithoutwithdrawl(address _token, address _from, uint _amount) {
    calldatacalled = true;
  }

  function callbackwithwithdrawl(uint _value, address _from, address _token) {
    calldatacalled = true;
    erc20 token = erc20(_token);
    token.transferfrom(_from, this, _value);
    tokensreceived = _value;
  }

}

pragma solidity ^0.4.8;


import ;


contract standardtokenmock is standardtoken {

  function standardtokenmock(address initialaccount, uint initialbalance)
  {
    balances[initialaccount] = initialbalance;
    totalsupply = initialbalance;
  }

}

pragma solidity ^0.4.11;



library safemath {
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal constant returns (uint256) {
    
    uint256 c = a / b;
    
    return c;
  }

  function sub(uint256 a, uint256 b) internal constant returns (uint256) {
    assert(b <= a);
    return a  b;
  }

  function add(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

