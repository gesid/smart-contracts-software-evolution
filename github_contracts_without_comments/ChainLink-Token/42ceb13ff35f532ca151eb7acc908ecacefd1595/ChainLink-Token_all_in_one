pragma solidity ^0.4.4;

import ;






contract metacoin {
	mapping (address => uint) balances;

	event transfer(address indexed _from, address indexed _to, uint256 _value);

	function metacoin() {
		balances[tx.origin] = 10000;
	}

	function sendcoin(address receiver, uint amount) returns(bool sufficient) {
		if (balances[msg.sender] < amount) return false;
		balances[msg.sender] = amount;
		balances[receiver] += amount;
		transfer(msg.sender, receiver, amount);
		return true;
	}

	function getbalanceineth(address addr) returns(uint){
		return convertlib.convert(getbalance(addr),2);
	}

	function getbalance(address addr) returns(uint) {
		return balances[addr];
	}
}

pragma solidity ^0.4.4;

contract migrations {
  address public owner;
  uint public last_completed_migration;

  modifier restricted() {
    if (msg.sender == owner) _;
  }

  function migrations() {
    owner = msg.sender;
  }

  function setcompleted(uint completed) restricted {
    last_completed_migration = completed;
  }

  function upgrade(address new_address) restricted {
    migrations upgraded = migrations(new_address);
    upgraded.setcompleted(last_completed_migration);
  }
}

pragma solidity ^0.4.4;

contract smartoracle {

  address public owner;

  function smartoracle() {
    owner = msg.sender;
  }

}

pragma solidity ^0.4.4;

library convertlib{
	function convert(uint amount,uint conversionrate) returns (uint convertedamount)
	{
		return amount * conversionrate;
	}
}

pragma solidity ^0.4.2;

import ;
import ;
import ;

contract testmetacoin {

  function testinitialbalanceusingdeployedcontract() {
    metacoin meta = metacoin(deployedaddresses.metacoin());

    uint expected = 10000;

    assert.equal(meta.getbalance(tx.origin), expected, );
  }

  function testinitialbalancewithnewmetacoin() {
    metacoin meta = new metacoin();

    uint expected = 10000;

    assert.equal(meta.getbalance(tx.origin), expected, );
  }

}

