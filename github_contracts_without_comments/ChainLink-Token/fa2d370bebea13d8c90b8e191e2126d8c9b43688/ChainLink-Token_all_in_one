pragma solidity ^0.4.11;



contract ownable {
  address public owner;


  
  function ownable()
  {
    owner = msg.sender;
  }


  
  function transferownership(address newowner)
  onlyowner
  {
    if (newowner != address(0)) {
      owner = newowner;
    }
  }


  

  
  modifier onlyowner()
  {
    require(msg.sender == owner);
    _;
  }
}

pragma solidity ^0.4.11;


import ;
import ;


contract linktoken is standardtoken {

  uint public constant totalsupply = 10**18;
  string public constant name = ;
  uint8 public constant decimals = 9;
  string public constant symbol = ;

  function linktoken()
  public
  {
    balances[msg.sender] = totalsupply;
  }

  
  function transfer(address _to, uint _value)
  public validrecipient(_to) returns (bool success)
  {
    super.transfer(_to, _value);
  }

  
  function approveandcall(address _recipient, uint _value, bytes _data)
  public returns (bool success)
  {
    approve(_recipient, _value);
    require(_recipient.call(_data));
  }


  

  modifier validrecipient(address _recipient) {
    require(_recipient != address(0) && _recipient != address(this));
    _;
  }

}

pragma solidity ^0.4.11;


import ;
import ;
import ;


contract tokensale is ownable {

  using safemath for uint;

  uint public limit;
  uint public starttime;
  uint public distributed;
  uint public phaseoneend;
  uint public phasetwoend;
  uint public phasethreeend;
  uint public endtime;
  address public recipient;
  linktoken public token;

  function tokensale(uint _limit, uint _prepurchased, uint _start, address _owner)
  public
  {
    limit = _limit;
    distributed = _prepurchased;
    starttime = _start;
    phaseoneend = _start + 1 days;
    phasetwoend = _start + 1 weeks;
    phasethreeend = _start + 2 weeks;
    endtime = _start + 4 weeks;
    token = new linktoken();
    owner = _owner;

    require(limit <= token.totalsupply());
  }

  function ()
  public payable ensurestarted ensurenotended underlimit
  {
    if (owner.send(msg.value)) {
      distributed += msg.value;
      token.transfer(msg.sender, purchased());
    }
  }

  function closeout()
  public onlyowner ensurestarted ensurecompleted
  {
    token.transfer(owner, token.balanceof(this));
  }


  

  function purchased()
  private returns (uint)
  {
    if (block.timestamp <= phaseoneend) {
      return msg.value.div(10**6).mul(2);
    } else if (block.timestamp <= phasetwoend) {
      return msg.value.mul(18).div(10**7);
    } else if (block.timestamp <= phasethreeend) {
      return msg.value.mul(15).div(10**7);
    } else {
      return msg.value.mul(12).div(10**7);
    }
  }

  function started()
  private returns (bool)
  {
    return block.timestamp >= starttime;
  }

  function ended()
  private returns (bool)
  {
    return block.timestamp > endtime;
  }

  function funded()
  private returns (bool)
  {
    return distributed == limit;
  }

  function completed()
  private returns (bool)
  {
    return ended() || funded();
  }


  

  modifier ensurestarted()
  {
    require(started());
    _;
  }

  modifier ensurenotended()
  {
    require(!ended());
    _;
  }

  modifier ensurecompleted()
  {
    require(completed());
    _;
  }

  modifier underlimit()
  {
    require(purchased() + distributed <= limit);
    _;
  }

}

pragma solidity ^0.4.11;


import ;



contract erc20 is erc20basic {
  function allowance(address owner, address spender) constant returns (uint256);
  function transferfrom(address from, address to, uint256 value) returns (bool);
  function approve(address spender, uint256 value) returns (bool);
  event approval(address indexed owner, address indexed spender, uint256 value);
}

pragma solidity ^0.4.11;


import ;
import ;



contract basictoken is erc20basic {
  using safemath for uint256;

  mapping(address => uint256) balances;

  
  function transfer(address _to, uint256 _value) returns (bool) {
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    transfer(msg.sender, _to, _value);
    return true;
  }

  
  function balanceof(address _owner) constant returns (uint256 balance) {
    return balances[_owner];
  }

}

pragma solidity ^0.4.11;


import ;
import ;



contract standardtoken is erc20, basictoken {

  mapping (address => mapping (address => uint256)) allowed;


  
  function transferfrom(address _from, address _to, uint256 _value) returns (bool) {
    var _allowance = allowed[_from][msg.sender];

    
    

    balances[_to] = balances[_to].add(_value);
    balances[_from] = balances[_from].sub(_value);
    allowed[_from][msg.sender] = _allowance.sub(_value);
    transfer(_from, _to, _value);
    return true;
  }

  
  function approve(address _spender, uint256 _value) returns (bool) {

    
    
    
    
    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;

    allowed[msg.sender][_spender] = _value;
    approval(msg.sender, _spender, _value);
    return true;
  }

  
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }

}

pragma solidity ^0.4.11;



contract erc20basic {
  uint256 public totalsupply;
  function balanceof(address who) constant returns (uint256);
  function transfer(address to, uint256 value) returns (bool);
  event transfer(address indexed from, address indexed to, uint256 value);
}

pragma solidity ^0.4.8;


import ;



contract basictokenmock is basictoken {

  function basictokenmock(address initialaccount, uint initialbalance)
  {
    balances[initialaccount] = initialbalance;
    totalsupply = initialbalance;
  }

}

pragma solidity ^0.4.11;


import ;


contract linkreceiver {

  bool public callbackcalled;
  uint public tokensreceived;


  function callbackwithoutwithdrawl()
  public
  {
    callbackcalled = true;
  }

  function callbackwithwithdrawl(uint _value)
  public
  {
    callbackcalled = true;
    tokensreceived = _value;
    erc20 token = erc20(msg.sender);
    token.transferfrom(tx.origin, this, _value);
  }


}

pragma solidity ^0.4.8;


import ;


contract standardtokenmock is standardtoken {

  function standardtokenmock(address initialaccount, uint initialbalance)
  {
    balances[initialaccount] = initialbalance;
    totalsupply = initialbalance;
  }

}

pragma solidity ^0.4.11;



library safemath {

  

  function mul(uint256 a, uint256 b)
  internal returns (uint256)
  {
    uint256 c = a * b;
    require(a == 0 || c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b)
  internal returns (uint256)
  {
    
    uint256 c = a / b;
    
    return c;
  }

  function sub(uint256 a, uint256 b)
  internal returns (uint256)
  {
    require(b <= a);
    return a  b;
  }

  function add(uint256 a, uint256 b)
  internal returns (uint256)
  {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
}

