pragma solidity 0.4.24;

import ;

contract powerledger is erc20tokeninterface {

  
  string public constant name = ;
  uint256 public constant decimals = 6;
  string public constant symbol = ;
  string public constant version = ;
  string public constant note = ;

  
  uint256 private constant totaltokens = 1000000000 * (10 ** decimals);

  mapping (address => uint256) public balances; 
  
  
  mapping (address => mapping (address => uint256)) public allowed; 

  
  event migrationinfoset(string newmigrationinfo);

  
  
  
  string public migrationinfo = ;

  
  address public migrationinfosetter;

  
  modifier onlyfrommigrationinfosetter {
    require (msg.sender == migrationinfosetter);
    _;
  }

  
  constructor() public {
    
    balances[msg.sender] = totaltokens;
  }

  
  function totalsupply() constant public returns (uint256) {
    return totaltokens;
  }

  
  function transfer(address _to, uint256 _value) public returns (bool) {
    if (balances[msg.sender] >= _value) {
      balances[msg.sender] = _value;
      balances[_to] += _value;
      emit transfer(msg.sender, _to, _value);
      return true;
    }
    return false;
  }

  
  function transferfrom(address _from, address _to, uint256 _value) public returns (bool) {
    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {
      balances[_from] = _value;
      allowed[_from][msg.sender] = _value;
      balances[_to] += _value;
      emit transfer(_from, _to, _value);
      return true;
    }
    return false;
  }

  
  function balanceof(address _owner) constant public returns (uint256) {
    return balances[_owner];
  }

  
  
  
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit approval(msg.sender, _spender, _value);
    return true;
  }

  
  function compareandapprove(address _spender, uint256 _currentvalue, uint256 _newvalue) public returns(bool) {
    if (allowed[msg.sender][_spender] != _currentvalue) {
      return false;
    }
    return approve(_spender, _newvalue);
  }

  
  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }

  
  
  
  
  function setmigrationinfo(string _migrationinfo) onlyfrommigrationinfosetter public {
    migrationinfo = _migrationinfo;
    emit migrationinfoset(_migrationinfo);
  }

  
  
  
  
  function changemigrationinfosetter(address _newmigrationinfosetter) onlyfrommigrationinfosetter public {
    migrationinfosetter = _newmigrationinfosetter;
  }
}
pragma solidity ^0.4.23;

contract migrations {
  address public owner;
  uint public last_completed_migration;

  constructor() public {
    owner = msg.sender;
  }

  modifier restricted() {
    if (msg.sender == owner) _;
  }

  function setcompleted(uint completed) public restricted {
    last_completed_migration = completed;
  }

  function upgrade(address new_address) public restricted {
    migrations upgraded = migrations(new_address);
    upgraded.setcompleted(last_completed_migration);
  }
}

pragma solidity ^0.4.24;


library safemath {

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
        
        
        
        if (a == 0) {
            return 0;
        }

        c = a * b;
        assert(c / a == b);
        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        return a / b;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a  b;
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        assert(c >= a);
        return c;
    }
}


pragma solidity 0.4.24;

import ;
import ;


contract newrequestvoting {
    using safemath for uint256;

    

    
    powerledger public powerledger;

    
    mapping ( address => string ) public requests;

    
    mapping ( address => vote[] ) public votes;

    
    mapping ( string => uint256 ) totalvotes;

    
    struct vote {
        string requestname;
        bool votetype;
        bool hasvoted;
        uint256 vote;        
    }
    
    
    
    
    modifier ispowrholder() {
        require(powerledger.balanceof(msg.sender) > 0);
        _;
    }

    
    modifier isvalidvoter(string _requestname) {
        
        
        require( !(comparestring(requests[msg.sender],_requestname)), );

        
        for ( uint i = 0 ; i < votes[msg.sender].length ; i++ ) {
            if( comparestring(votes[msg.sender][i].requestname, _requestname) ) {
                require( !(votes[msg.sender][i].hasvoted) );
            }   
        }
        _;
    }

    
     
    
    constructor(powerledger _powerledger) public {
        powerledger = _powerledger;
    }

    
     
    
    function newfunctionalityrequest(string _requestname)
        ispowrholder public returns (bool) {

            
            require(bytes(_requestname).length > 0);

            
            require( totalvotes[_requestname] == 0 );
            
            requests[msg.sender] = _requestname;

            return true;
    }
    
    
    function voteforrequest(string _requestname, bool _isupvote)
        ispowrholder
        isvalidvoter(_requestname)
        public returns (bool) {

            vote memory newvote;

            
            newvote.requestname = _requestname;
            newvote.vote = powerledger.balanceof(msg.sender);
            newvote.votetype = _isupvote;
            newvote.hasvoted = true;

            
            votes[msg.sender].push(newvote);
            
            if ( _isupvote ) {
                totalvotes[_requestname] += newvote.vote;
                return true;
            }
            else if ( !_isupvote ) {
                totalvotes[_requestname] = newvote.vote;
                return true;
            }
            return false;
    }
    
    
    function gettotalvotes(string _requestname)
        public view returns (uint256) {            
            return totalvotes[_requestname];
    }

    
    function comparestring(string a, string b) pure internal returns (bool) {
        if(bytes(a).length != bytes(b).length) {
            return false;
        } else {
            return keccak256(bytes(a)) == keccak256(bytes(b));
        }
    }
}
pragma solidity 0.4.24;


 contract erc20tokeninterface {

    
    function totalsupply() constant public returns (uint256 supply);

    
    
    function balanceof(address _owner) constant public returns (uint256 balance);

    
    
    
    
    function transfer(address _to, uint256 _value) public returns (bool success);

    
    
    
    
    
    function transferfrom(address _from, address _to, uint256 _value) public returns (bool success);

    
    
    
    
    function approve(address _spender, uint256 _value) public returns (bool success);

    
    
    
    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);

    event transfer(address indexed from, address indexed to, uint256 value);
    event approval(address indexed owner, address indexed spender, uint256 value);
}
