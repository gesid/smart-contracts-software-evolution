pragma solidity ^0.4.11;
import ;
import ;
import ;


contract bancorgaspricelimit is ibancorgaspricelimit, owned, utils {
    uint256 public gasprice = 0 wei;    

    
    function bancorgaspricelimit(uint256 _gasprice)
        greaterthanzero(_gasprice)
    {
        gasprice = _gasprice;
    }

    
    function setgasprice(uint256 _gasprice)
        public
        owneronly
        greaterthanzero(_gasprice)
    {
        gasprice = _gasprice;
    }
}

pragma solidity ^0.4.11;
import ;
import ;
import ;
import ;


contract bancorpricefloor is owned, tokenholder {
    uint256 public constant token_price_n = 1;      
    uint256 public constant token_price_d = 100;    

    string public version = ;
    ismarttoken public token; 

    
    function bancorpricefloor(ismarttoken _token)
        validaddress(_token)
    {
        token = _token;
    }

    
    function sell() public returns (uint256 amount) {
        uint256 allowance = token.allowance(msg.sender, this); 
        assert(token.transferfrom(msg.sender, this, allowance)); 
        uint256 ethervalue = safemul(allowance, token_price_n) / token_price_d; 
        msg.sender.transfer(ethervalue); 
        return ethervalue;
    }

    
    function withdraw(uint256 _amount) public owneronly {
        msg.sender.transfer(_amount); 
    }

    
    function() public payable {
    }
}

pragma solidity ^0.4.11;
import ;
import ;
import ;
import ;


contract smarttoken is ismarttoken, owned, erc20token, tokenholder {
    string public version = ;

    bool public transfersenabled = true;    

    
    event newsmarttoken(address _token);
    
    event issuance(uint256 _amount);
    
    event destruction(uint256 _amount);

    
    function smarttoken(string _name, string _symbol, uint8 _decimals)
        erc20token(_name, _symbol, _decimals)
    {
        newsmarttoken(address(this));
    }

    
    modifier transfersallowed {
        assert(transfersenabled);
        _;
    }

    
    function disabletransfers(bool _disable) public owneronly {
        transfersenabled = !_disable;
    }

    
    function issue(address _to, uint256 _amount)
        public
        owneronly
        validaddress(_to)
        notthis(_to)
    {
        totalsupply = safeadd(totalsupply, _amount);
        balanceof[_to] = safeadd(balanceof[_to], _amount);

        issuance(_amount);
        transfer(this, _to, _amount);
    }

    
    function destroy(address _from, uint256 _amount) public {
        require(msg.sender == _from || msg.sender == owner); 

        balanceof[_from] = safesub(balanceof[_from], _amount);
        totalsupply = safesub(totalsupply, _amount);

        transfer(_from, this, _amount);
        destruction(_amount);
    }

    

    
    function transfer(address _to, uint256 _value) public transfersallowed returns (bool success) {
        assert(super.transfer(_to, _value));
        return true;
    }

    
    function transferfrom(address _from, address _to, uint256 _value) public transfersallowed returns (bool success) {
        assert(super.transferfrom(_from, _to, _value));
        return true;
    }
}

pragma solidity ^0.4.11;
import ;
import ;
import ;
import ;
import ;
import ;
import ;


contract bancorconverter is itokenconverter, smarttokencontroller, managed {
    uint32 private constant max_weight = 1000000;
    uint32 private constant max_conversion_fee = 1000000;

    struct connector {
        uint256 virtualbalance;         
        uint32 weight;                  
        bool isvirtualbalanceenabled;   
        bool ispurchaseenabled;         
        bool isset;                     
    }

    string public version = ;
    string public convertertype = ;

    ibancorconverterextensions public extensions;       
    ierc20token[] public connectortokens;               
    ierc20token[] public quickbuypath;                  
    mapping (address => connector) public connectors;   
    uint32 private totalconnectorweight = 0;            
    uint32 public maxconversionfee = 0;                 
    uint32 public conversionfee = 0;                    
    bool public conversionsenabled = true;              

    
    event conversion(address indexed _fromtoken, address indexed _totoken, address indexed _trader, uint256 _amount, uint256 _return,
                     uint256 _currentpricen, uint256 _currentpriced);

    
    function bancorconverter(ismarttoken _token, ibancorconverterextensions _extensions, uint32 _maxconversionfee, ierc20token _connectortoken, uint32 _connectorweight)
        smarttokencontroller(_token)
        validaddress(_extensions)
        validmaxconversionfee(_maxconversionfee)
    {
        extensions = _extensions;
        maxconversionfee = _maxconversionfee;

        if (address(_connectortoken) != 0x0)
            addconnector(_connectortoken, _connectorweight, false);
    }

    
    modifier validconnector(ierc20token _address) {
        require(connectors[_address].isset);
        _;
    }

    
    modifier validtoken(ierc20token _address) {
        require(_address == token || connectors[_address].isset);
        _;
    }

    
    modifier validgasprice() {
        assert(tx.gasprice <= extensions.gaspricelimit().gasprice());
        _;
    }

    
    modifier validmaxconversionfee(uint32 _conversionfee) {
        require(_conversionfee >= 0 && _conversionfee <= max_conversion_fee);
        _;
    }

    
    modifier validconversionfee(uint32 _conversionfee) {
        require(_conversionfee >= 0 && _conversionfee <= maxconversionfee);
        _;
    }

    
    modifier validconnectorweight(uint32 _weight) {
        require(_weight > 0 && _weight <= max_weight);
        _;
    }

    
    modifier validconversionpath(ierc20token[] _path) {
        require(_path.length > 2 && _path.length <= (1 + 2 * 10) && _path.length % 2 == 1);
        _;
    }

    
    modifier conversionsallowed {
        assert(conversionsenabled);
        _;
    }

    
    function connectortokencount() public constant returns (uint16) {
        return uint16(connectortokens.length);
    }

    
    function convertibletokencount() public constant returns (uint16) {
        return connectortokencount() + 1;
    }

    
    function convertibletoken(uint16 _tokenindex) public constant returns (address) {
        if (_tokenindex == 0)
            return token;
        return connectortokens[_tokenindex  1];
    }

    
    function setextensions(ibancorconverterextensions _extensions)
        public
        owneronly
        validaddress(_extensions)
        notthis(_extensions)
    {
        extensions = _extensions;
    }

    
    function setquickbuypath(ierc20token[] _path)
        public
        owneronly
        validconversionpath(_path)
    {
        quickbuypath = _path;
    }

    
    function clearquickbuypath() public owneronly {
        quickbuypath.length = 0;
    }

    
    function getquickbuypathlength() public constant returns (uint256) {
        return quickbuypath.length;
    }

    
    function disableconversions(bool _disable) public manageronly {
        conversionsenabled = !_disable;
    }

    
    function setconversionfee(uint32 _conversionfee)
        public
        manageronly
        validconversionfee(_conversionfee)
    {
        conversionfee = _conversionfee;
    }

    
    function getconversionfeeamount(uint256 _amount) public constant returns (uint256) {
        return safemul(_amount, conversionfee) / max_conversion_fee;
    }

    
    function addconnector(ierc20token _token, uint32 _weight, bool _enablevirtualbalance)
        public
        owneronly
        inactive
        validaddress(_token)
        notthis(_token)
        validconnectorweight(_weight)
    {
        require(_token != token && !connectors[_token].isset && totalconnectorweight + _weight <= max_weight); 

        connectors[_token].virtualbalance = 0;
        connectors[_token].weight = _weight;
        connectors[_token].isvirtualbalanceenabled = _enablevirtualbalance;
        connectors[_token].ispurchaseenabled = true;
        connectors[_token].isset = true;
        connectortokens.push(_token);
        totalconnectorweight += _weight;
    }

    
    function updateconnector(ierc20token _connectortoken, uint32 _weight, bool _enablevirtualbalance, uint256 _virtualbalance)
        public
        owneronly
        validconnector(_connectortoken)
        validconnectorweight(_weight)
    {
        connector storage connector = connectors[_connectortoken];
        require(totalconnectorweight  connector.weight + _weight <= max_weight); 

        totalconnectorweight = totalconnectorweight  connector.weight + _weight;
        connector.weight = _weight;
        connector.isvirtualbalanceenabled = _enablevirtualbalance;
        connector.virtualbalance = _virtualbalance;
    }

    
    function disableconnectorpurchases(ierc20token _connectortoken, bool _disable)
        public
        owneronly
        validconnector(_connectortoken)
    {
        connectors[_connectortoken].ispurchaseenabled = !_disable;
    }

    
    function getconnectorbalance(ierc20token _connectortoken)
        public
        constant
        validconnector(_connectortoken)
        returns (uint256)
    {
        connector storage connector = connectors[_connectortoken];
        return connector.isvirtualbalanceenabled ? connector.virtualbalance : _connectortoken.balanceof(this);
    }

    
    function getreturn(ierc20token _fromtoken, ierc20token _totoken, uint256 _amount) public constant returns (uint256) {
        require(_fromtoken != _totoken); 

        
        if (_totoken == token)
            return getpurchasereturn(_fromtoken, _amount);
        else if (_fromtoken == token)
            return getsalereturn(_totoken, _amount);

        
        uint256 purchasereturnamount = getpurchasereturn(_fromtoken, _amount);
        return getsalereturn(_totoken, purchasereturnamount, safeadd(token.totalsupply(), purchasereturnamount));
    }

    
    function getpurchasereturn(ierc20token _connectortoken, uint256 _depositamount)
        public
        constant
        active
        validconnector(_connectortoken)
        returns (uint256)
    {
        connector storage connector = connectors[_connectortoken];
        require(connector.ispurchaseenabled); 

        uint256 tokensupply = token.totalsupply();
        uint256 connectorbalance = getconnectorbalance(_connectortoken);
        uint256 amount = extensions.formula().calculatepurchasereturn(tokensupply, connectorbalance, connector.weight, _depositamount);

        
        uint256 feeamount = getconversionfeeamount(amount);
        return safesub(amount, feeamount);
    }

    
    function getsalereturn(ierc20token _connectortoken, uint256 _sellamount) public constant returns (uint256) {
        return getsalereturn(_connectortoken, _sellamount, token.totalsupply());
    }

    
    function convert(ierc20token _fromtoken, ierc20token _totoken, uint256 _amount, uint256 _minreturn) public returns (uint256) {
        require(_fromtoken != _totoken); 

        
        if (_totoken == token)
            return buy(_fromtoken, _amount, _minreturn);
        else if (_fromtoken == token)
            return sell(_totoken, _amount, _minreturn);

        
        uint256 purchaseamount = buy(_fromtoken, _amount, 1);
        return sell(_totoken, purchaseamount, _minreturn);
    }

    
    function buy(ierc20token _connectortoken, uint256 _depositamount, uint256 _minreturn)
        public
        conversionsallowed
        validgasprice
        greaterthanzero(_minreturn)
        returns (uint256)
    {
        uint256 amount = getpurchasereturn(_connectortoken, _depositamount);
        assert(amount != 0 && amount >= _minreturn); 

        
        connector storage connector = connectors[_connectortoken];
        if (connector.isvirtualbalanceenabled)
            connector.virtualbalance = safeadd(connector.virtualbalance, _depositamount);

        
        assert(_connectortoken.transferfrom(msg.sender, this, _depositamount));
        
        token.issue(msg.sender, amount);

        
        
        
        uint256 connectoramount = safemul(getconnectorbalance(_connectortoken), max_weight);
        uint256 tokenamount = safemul(token.totalsupply(), connector.weight);
        conversion(_connectortoken, token, msg.sender, _depositamount, amount, connectoramount, tokenamount);
        return amount;
    }

    
    function sell(ierc20token _connectortoken, uint256 _sellamount, uint256 _minreturn)
        public
        conversionsallowed
        validgasprice
        greaterthanzero(_minreturn)
        returns (uint256)
    {
        require(_sellamount <= token.balanceof(msg.sender)); 

        uint256 amount = getsalereturn(_connectortoken, _sellamount);
        assert(amount != 0 && amount >= _minreturn); 

        uint256 tokensupply = token.totalsupply();
        uint256 connectorbalance = getconnectorbalance(_connectortoken);
        
        assert(amount < connectorbalance || (amount == connectorbalance && _sellamount == tokensupply));

        
        connector storage connector = connectors[_connectortoken];
        if (connector.isvirtualbalanceenabled)
            connector.virtualbalance = safesub(connector.virtualbalance, amount);

        
        token.destroy(msg.sender, _sellamount);
        
        
        assert(_connectortoken.transfer(msg.sender, amount));

        
        
        
        uint256 connectoramount = safemul(getconnectorbalance(_connectortoken), max_weight);
        uint256 tokenamount = safemul(token.totalsupply(), connector.weight);
        conversion(token, _connectortoken, msg.sender, _sellamount, amount, tokenamount, connectoramount);
        return amount;
    }

    
    function quickconvert(ierc20token[] _path, uint256 _amount, uint256 _minreturn)
        public
        payable
        validconversionpath(_path)
        returns (uint256)
    {
        ierc20token fromtoken = _path[0];
        ibancorquickconverter quickconverter = extensions.quickconverter();

        
        
        if (msg.value == 0) {
            
            
            if (fromtoken == token) {
                token.destroy(msg.sender, _amount); 
                token.issue(quickconverter, _amount); 
            }
            else {
                
                assert(fromtoken.transferfrom(msg.sender, quickconverter, _amount));
            }
        }

        
        return quickconverter.convertfor.value(msg.value)(_path, _amount, _minreturn, msg.sender);
    }

    
    function change(ierc20token _fromtoken, ierc20token _totoken, uint256 _amount, uint256 _minreturn) public returns (uint256) {
        return convert(_fromtoken, _totoken, _amount, _minreturn);
    }

    
    function getsalereturn(ierc20token _connectortoken, uint256 _sellamount, uint256 _totalsupply)
        private
        constant
        active
        validconnector(_connectortoken)
        greaterthanzero(_totalsupply)
        returns (uint256)
    {
        connector storage connector = connectors[_connectortoken];
        uint256 connectorbalance = getconnectorbalance(_connectortoken);
        uint256 amount = extensions.formula().calculatesalereturn(_totalsupply, connectorbalance, connector.weight, _sellamount);

        
        uint256 feeamount = getconversionfeeamount(amount);
        return safesub(amount, feeamount);
    }

    
    function() payable {
        quickconvert(quickbuypath, msg.value, 1);
    }
}

pragma solidity ^0.4.11;
import ;
import ;
import ;


contract crowdsalecontroller is smarttokencontroller {
    uint256 public constant duration = 14 days;                 
    uint256 public constant token_price_n = 1;                  
    uint256 public constant token_price_d = 100;                
    uint256 public constant btcs_ether_cap = 50000 ether;       
    uint256 public constant max_gas_price = 50000000000 wei;    

    string public version = ;

    uint256 public starttime = 0;                   
    uint256 public endtime = 0;                     
    uint256 public totalethercap = 1000000 ether;   
    uint256 public totalethercontributed = 0;       
    bytes32 public realethercaphash;                
    address public beneficiary = 0x0;               
    address public btcs = 0x0;                      

    
    event contribution(address indexed _contributor, uint256 _amount, uint256 _return);

    
    function crowdsalecontroller(ismarttoken _token, uint256 _starttime, address _beneficiary, address _btcs, bytes32 _realethercaphash)
        smarttokencontroller(_token)
        validaddress(_beneficiary)
        validaddress(_btcs)
        earlierthan(_starttime)
        greaterthanzero(uint256(_realethercaphash))
    {
        starttime = _starttime;
        endtime = starttime + duration;
        beneficiary = _beneficiary;
        btcs = _btcs;
        realethercaphash = _realethercaphash;
    }

    
    modifier validgasprice() {
        assert(tx.gasprice <= max_gas_price);
        _;
    }

    
    modifier validethercap(uint256 _cap, uint256 _key) {
        require(computerealcap(_cap, _key) == realethercaphash);
        _;
    }

    
    modifier earlierthan(uint256 _time) {
        assert(now < _time);
        _;
    }

    
    modifier between(uint256 _starttime, uint256 _endtime) {
        assert(now >= _starttime && now < _endtime);
        _;
    }

    
    modifier btcsonly() {
        assert(msg.sender == btcs);
        _;
    }

    
    modifier ethercapnotreached(uint256 _contribution) {
        assert(safeadd(totalethercontributed, _contribution) <= totalethercap);
        _;
    }

    
    modifier btcsethercapnotreached(uint256 _ethcontribution) {
        assert(safeadd(totalethercontributed, _ethcontribution) <= btcs_ether_cap);
        _;
    }

    
    function computerealcap(uint256 _cap, uint256 _key) public constant returns (bytes32) {
        return keccak256(_cap, _key);
    }

    
    function enablerealcap(uint256 _cap, uint256 _key)
        public
        owneronly
        active
        between(starttime, endtime)
        validethercap(_cap, _key)
    {
        require(_cap < totalethercap); 
        totalethercap = _cap;
    }

    
    function computereturn(uint256 _contribution) public constant returns (uint256) {
        return safemul(_contribution, token_price_d) / token_price_n;
    }

    
    function contributeeth()
        public
        payable
        between(starttime, endtime)
        returns (uint256 amount)
    {
        return processcontribution();
    }

    
    function contributebtcs()
        public
        payable
        btcsonly
        btcsethercapnotreached(msg.value)
        earlierthan(starttime)
        returns (uint256 amount)
    {
        return processcontribution();
    }

    
    function processcontribution() private
        active
        ethercapnotreached(msg.value)
        validgasprice
        returns (uint256 amount)
    {
        uint256 tokenamount = computereturn(msg.value);
        beneficiary.transfer(msg.value); 
        totalethercontributed = safeadd(totalethercontributed, msg.value); 
        token.issue(msg.sender, tokenamount); 
        token.issue(beneficiary, tokenamount); 

        contribution(msg.sender, msg.value, tokenamount);
        return tokenamount;
    }

    
    function() payable {
        contributeeth();
    }
}

pragma solidity ^0.4.11;
import ;
import ;
import ;
import ;
import ;


contract bancorquickconverter is ibancorquickconverter, tokenholder {
    mapping (address => bool) public ethertokens;   

    
    function bancorquickconverter() {
    }

    
    modifier validconversionpath(ierc20token[] _path) {
        require(_path.length > 2 && _path.length <= (1 + 2 * 10) && _path.length % 2 == 1);
        _;
    }

    
    function registerethertoken(iethertoken _token, bool _register)
        public
        owneronly
        validaddress(_token)
        notthis(_token)
    {
        ethertokens[_token] = _register;
    }

    
    function convertfor(ierc20token[] _path, uint256 _amount, uint256 _minreturn, address _for)
        public
        payable
        validconversionpath(_path)
        returns (uint256)
    {
        
        ierc20token fromtoken = _path[0];
        require(msg.value == 0 || (_amount == msg.value && ethertokens[fromtoken]));

        ismarttoken smarttoken;
        ierc20token totoken;
        itokenconverter converter;
        uint256 pathlength = _path.length;

        
        
        if (msg.value > 0)
            iethertoken(fromtoken).deposit.value(msg.value)();

        
        for (uint256 i = 1; i < pathlength; i += 2) {
            smarttoken = ismarttoken(_path[i]);
            totoken = _path[i + 1];
            converter = itokenconverter(smarttoken.owner());

            
            if (smarttoken != fromtoken)
                ensureallowance(fromtoken, converter, _amount);

            
            _amount = converter.change(fromtoken, totoken, _amount, i == pathlength  2 ? _minreturn : 1);
            fromtoken = totoken;
        }

        
        
        
        if (ethertokens[totoken])
            iethertoken(totoken).withdrawto(_for, _amount);
        else
            assert(totoken.transfer(_for, _amount));

        return _amount;
    }

    
    function claimandconvertfor(ierc20token[] _path, uint256 _amount, uint256 _minreturn, address _for) public returns (uint256) {
        
        
        
        ierc20token fromtoken = _path[0];
        assert(fromtoken.transferfrom(msg.sender, this, _amount));
        return convertfor(_path, _amount, _minreturn, _for);
    }

    
    function convert(ierc20token[] _path, uint256 _amount, uint256 _minreturn) public payable returns (uint256) {
        return convertfor(_path, _amount, _minreturn, msg.sender);
    }

    
    function claimandconvert(ierc20token[] _path, uint256 _amount, uint256 _minreturn) public returns (uint256) {
        return claimandconvertfor(_path, _amount, _minreturn, msg.sender);
    }

    
    function ensureallowance(ierc20token _token, address _spender, uint256 _value) private {
        
        if (_token.allowance(this, _spender) >= _value)
            return;

        
        if (_token.allowance(this, _spender) != 0)
            assert(_token.approve(_spender, 0));

        
        assert(_token.approve(_spender, _value));
    }
}

pragma solidity ^0.4.11;
import ;


contract owned is iowned {
    address public owner;
    address public newowner;

    event ownerupdate(address _prevowner, address _newowner);

    
    function owned() {
        owner = msg.sender;
    }

    
    modifier owneronly {
        assert(msg.sender == owner);
        _;
    }

    
    function transferownership(address _newowner) public owneronly {
        require(_newowner != owner);
        newowner = _newowner;
    }

    
    function acceptownership() public {
        require(msg.sender == newowner);
        ownerupdate(owner, newowner);
        owner = newowner;
        newowner = 0x0;
    }
}

pragma solidity ^0.4.11;


contract utils {
    
    function utils() {
    }

    
    modifier greaterthanzero(uint256 _amount) {
        require(_amount > 0);
        _;
    }

    
    modifier validaddress(address _address) {
        require(_address != 0x0);
        _;
    }

    
    modifier notthis(address _address) {
        require(_address != address(this));
        _;
    }

    

    
    function safeadd(uint256 _x, uint256 _y) internal returns (uint256) {
        uint256 z = _x + _y;
        assert(z >= _x);
        return z;
    }

    
    function safesub(uint256 _x, uint256 _y) internal returns (uint256) {
        assert(_x >= _y);
        return _x  _y;
    }

    
    function safemul(uint256 _x, uint256 _y) internal returns (uint256) {
        uint256 z = _x * _y;
        assert(_x == 0 || z / _x == _y);
        return z;
    }
}

pragma solidity ^0.4.11;


contract managed {
    address public manager;
    address public newmanager;

    event managerupdate(address _prevmanager, address _newmanager);

    
    function managed() {
        manager = msg.sender;
    }

    
    modifier manageronly {
        assert(msg.sender == manager);
        _;
    }

    
    function transfermanagement(address _newmanager) public manageronly {
        require(_newmanager != manager);
        newmanager = _newmanager;
    }

    
    function acceptmanagement() public {
        require(msg.sender == newmanager);
        managerupdate(manager, newmanager);
        manager = newmanager;
        newmanager = 0x0;
    }
}

pragma solidity ^0.4.11;
import ;
import ;


contract erc20token is ierc20token, utils {
    string public standard = ;
    string public name = ;
    string public symbol = ;
    uint8 public decimals = 0;
    uint256 public totalsupply = 0;
    mapping (address => uint256) public balanceof;
    mapping (address => mapping (address => uint256)) public allowance;

    event transfer(address indexed _from, address indexed _to, uint256 _value);
    event approval(address indexed _owner, address indexed _spender, uint256 _value);

    
    function erc20token(string _name, string _symbol, uint8 _decimals) {
        require(bytes(_name).length > 0 && bytes(_symbol).length > 0); 

        name = _name;
        symbol = _symbol;
        decimals = _decimals;
    }

    
    function transfer(address _to, uint256 _value)
        public
        validaddress(_to)
        returns (bool success)
    {
        balanceof[msg.sender] = safesub(balanceof[msg.sender], _value);
        balanceof[_to] = safeadd(balanceof[_to], _value);
        transfer(msg.sender, _to, _value);
        return true;
    }

    
    function transferfrom(address _from, address _to, uint256 _value)
        public
        validaddress(_from)
        validaddress(_to)
        returns (bool success)
    {
        allowance[_from][msg.sender] = safesub(allowance[_from][msg.sender], _value);
        balanceof[_from] = safesub(balanceof[_from], _value);
        balanceof[_to] = safeadd(balanceof[_to], _value);
        transfer(_from, _to, _value);
        return true;
    }

    
    function approve(address _spender, uint256 _value)
        public
        validaddress(_spender)
        returns (bool success)
    {
        
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        approval(msg.sender, _spender, _value);
        return true;
    }
}

pragma solidity ^0.4.11;
import ;
import ;
import ;
import ;


contract tokenholder is itokenholder, owned, utils {
    
    function tokenholder() {
    }

    
    function withdrawtokens(ierc20token _token, address _to, uint256 _amount)
        public
        owneronly
        validaddress(_token)
        validaddress(_to)
        notthis(_to)
    {
        assert(_token.transfer(_to, _amount));
    }
}

pragma solidity ^0.4.11;
import ;
import ;


contract smarttokencontroller is tokenholder {
    ismarttoken public token;   

    
    function smarttokencontroller(ismarttoken _token)
        validaddress(_token)
    {
        token = _token;
    }

    
    modifier active() {
        assert(token.owner() == address(this));
        _;
    }

    
    modifier inactive() {
        assert(token.owner() != address(this));
        _;
    }

    
    function transfertokenownership(address _newowner) public owneronly {
        token.transferownership(_newowner);
    }

    
    function accepttokenownership() public owneronly {
        token.acceptownership();
    }

    
    function disabletokentransfers(bool _disable) public owneronly {
        token.disabletransfers(_disable);
    }

    
    function withdrawfromtoken(ierc20token _token, address _to, uint256 _amount) public owneronly {
        itokenholder(token).withdrawtokens(_token, _to, _amount);
    }
}

pragma solidity ^0.4.11;
import ;
import ;

contract bancorformula is ibancorformula, utils {
    string public version = ;

    uint256 private constant one = 1;
    uint32 private constant max_weight = 1000000;
    uint8 private constant min_precision = 32;
    uint8 private constant max_precision = 127;

    
    uint256 private constant fixed_1 = 0x080000000000000000000000000000000;
    uint256 private constant fixed_2 = 0x100000000000000000000000000000000;
    uint256 private constant max_num = 0x1ffffffffffffffffffffffffffffffff;

    
    uint256 private constant ln2_mantissa = 0x2c5c85fdf473de6af278ece600fcbda;
    uint8   private constant ln2_exponent = 122;

    
    uint256[128] private maxexparray;

    function bancorformula() {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        maxexparray[ 32] = 0x1c35fedd14ffffffffffffffffffffffff;
        maxexparray[ 33] = 0x1b0ce43b323fffffffffffffffffffffff;
        maxexparray[ 34] = 0x19f0028ec1ffffffffffffffffffffffff;
        maxexparray[ 35] = 0x18ded91f0e7fffffffffffffffffffffff;
        maxexparray[ 36] = 0x17d8ec7f0417ffffffffffffffffffffff;
        maxexparray[ 37] = 0x16ddc6556cdbffffffffffffffffffffff;
        maxexparray[ 38] = 0x15ecf52776a1ffffffffffffffffffffff;
        maxexparray[ 39] = 0x15060c256cb2ffffffffffffffffffffff;
        maxexparray[ 40] = 0x1428a2f98d72ffffffffffffffffffffff;
        maxexparray[ 41] = 0x13545598e5c23fffffffffffffffffffff;
        maxexparray[ 42] = 0x1288c4161ce1dfffffffffffffffffffff;
        maxexparray[ 43] = 0x11c592761c666fffffffffffffffffffff;
        maxexparray[ 44] = 0x110a688680a757ffffffffffffffffffff;
        maxexparray[ 45] = 0x1056f1b5bedf77ffffffffffffffffffff;
        maxexparray[ 46] = 0x0faadceceeff8bffffffffffffffffffff;
        maxexparray[ 47] = 0x0f05dc6b27edadffffffffffffffffffff;
        maxexparray[ 48] = 0x0e67a5a25da4107fffffffffffffffffff;
        maxexparray[ 49] = 0x0dcff115b14eedffffffffffffffffffff;
        maxexparray[ 50] = 0x0d3e7a392431239fffffffffffffffffff;
        maxexparray[ 51] = 0x0cb2ff529eb71e4fffffffffffffffffff;
        maxexparray[ 52] = 0x0c2d415c3db974afffffffffffffffffff;
        maxexparray[ 53] = 0x0bad03e7d883f69bffffffffffffffffff;
        maxexparray[ 54] = 0x0b320d03b2c343d5ffffffffffffffffff;
        maxexparray[ 55] = 0x0abc25204e02828dffffffffffffffffff;
        maxexparray[ 56] = 0x0a4b16f74ee4bb207fffffffffffffffff;
        maxexparray[ 57] = 0x09deaf736ac1f569ffffffffffffffffff;
        maxexparray[ 58] = 0x0976bd9952c7aa957fffffffffffffffff;
        maxexparray[ 59] = 0x09131271922eaa606fffffffffffffffff;
        maxexparray[ 60] = 0x08b380f3558668c46fffffffffffffffff;
        maxexparray[ 61] = 0x0857ddf0117efa215bffffffffffffffff;
        maxexparray[ 62] = 0x07ffffffffffffffffffffffffffffffff;
        maxexparray[ 63] = 0x07abbf6f6abb9d087fffffffffffffffff;
        maxexparray[ 64] = 0x075af62cbac95f7dfa7fffffffffffffff;
        maxexparray[ 65] = 0x070d7fb7452e187ac13fffffffffffffff;
        maxexparray[ 66] = 0x06c3390ecc8af379295fffffffffffffff;
        maxexparray[ 67] = 0x067c00a3b07ffc01fd6fffffffffffffff;
        maxexparray[ 68] = 0x0637b647c39cbb9d3d27ffffffffffffff;
        maxexparray[ 69] = 0x05f63b1fc104dbd39587ffffffffffffff;
        maxexparray[ 70] = 0x05b771955b36e12f7235ffffffffffffff;
        maxexparray[ 71] = 0x057b3d49dda84556d6f6ffffffffffffff;
        maxexparray[ 72] = 0x054183095b2c8ececf30ffffffffffffff;
        maxexparray[ 73] = 0x050a28be635ca2b888f77fffffffffffff;
        maxexparray[ 74] = 0x04d5156639708c9db33c3fffffffffffff;
        maxexparray[ 75] = 0x04a23105873875bd52dfdfffffffffffff;
        maxexparray[ 76] = 0x0471649d87199aa990756fffffffffffff;
        maxexparray[ 77] = 0x04429a21a029d4c1457cfbffffffffffff;
        maxexparray[ 78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;
        maxexparray[ 79] = 0x03eab73b3bbfe282243ce1ffffffffffff;
        maxexparray[ 80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;
        maxexparray[ 81] = 0x0399e96897690418f785257fffffffffff;
        maxexparray[ 82] = 0x0373fc456c53bb779bf0ea9fffffffffff;
        maxexparray[ 83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;
        maxexparray[ 84] = 0x032cbfd4a7adc790560b3337ffffffffff;
        maxexparray[ 85] = 0x030b50570f6e5d2acca94613ffffffffff;
        maxexparray[ 86] = 0x02eb40f9f620fda6b56c2861ffffffffff;
        maxexparray[ 87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;
        maxexparray[ 88] = 0x02af09481380a0a35cf1ba02ffffffffff;
        maxexparray[ 89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;
        maxexparray[ 90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;
        maxexparray[ 91] = 0x025daf6654b1eaa55fd64df5efffffffff;
        maxexparray[ 92] = 0x0244c49c648baa98192dce88b7ffffffff;
        maxexparray[ 93] = 0x022ce03cd5619a311b2471268bffffffff;
        maxexparray[ 94] = 0x0215f77c045fbe885654a44a0fffffffff;
        maxexparray[ 95] = 0x01ffffffffffffffffffffffffffffffff;
        maxexparray[ 96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;
        maxexparray[ 97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;
        maxexparray[ 98] = 0x01c35fedd14b861eb0443f7f133fffffff;
        maxexparray[ 99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;
        maxexparray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;
        maxexparray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;
        maxexparray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;
        maxexparray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;
        maxexparray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;
        maxexparray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;
        maxexparray[106] = 0x01428a2f98d728ae223ddab715be3fffff;
        maxexparray[107] = 0x013545598e5c23276ccf0ede68034fffff;
        maxexparray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;
        maxexparray[109] = 0x011c592761c666aa641d5a01a40f17ffff;
        maxexparray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;
        maxexparray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;
        maxexparray[112] = 0x00faadceceeff8a0890f3875f008277fff;
        maxexparray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;
        maxexparray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;
        maxexparray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;
        maxexparray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;
        maxexparray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;
        maxexparray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;
        maxexparray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;
        maxexparray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;
        maxexparray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;
        maxexparray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;
        maxexparray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;
        maxexparray[124] = 0x00976bd9952c7aa957f5937d790ef65037;
        maxexparray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;
        maxexparray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;
        maxexparray[127] = 0x00857ddf0117efa215952912839f6473e6;
    }

    
    function calculatepurchasereturn(uint256 _supply, uint256 _connectorbalance, uint32 _connectorweight, uint256 _depositamount) public constant returns (uint256) {
        
        require(_supply > 0 && _connectorbalance > 0 && _connectorweight > 0 && _connectorweight <= max_weight);

        
        if (_depositamount == 0)
            return 0;

        
        if (_connectorweight == max_weight)
            return safemul(_supply, _depositamount) / _connectorbalance;

        uint256 result;
        uint8 precision;
        uint256 basen = safeadd(_depositamount, _connectorbalance);
        (result, precision) = power(basen, _connectorbalance, _connectorweight, max_weight);
        uint256 temp = safemul(_supply, result) >> precision;
        return temp  _supply;
     }

    
    function calculatesalereturn(uint256 _supply, uint256 _connectorbalance, uint32 _connectorweight, uint256 _sellamount) public constant returns (uint256) {
        
        require(_supply > 0 && _connectorbalance > 0 && _connectorweight > 0 && _connectorweight <= max_weight && _sellamount <= _supply);

        
        if (_sellamount == 0)
            return 0;

        
        if (_sellamount == _supply)
            return _connectorbalance;

        
        if (_connectorweight == max_weight)
            return safemul(_connectorbalance, _sellamount) / _supply;

        uint256 result;
        uint8 precision;
        uint256 based = _supply  _sellamount;
        (result, precision) = power(_supply, based, max_weight, _connectorweight);
        uint256 temp1 = safemul(_connectorbalance, result);
        uint256 temp2 = _connectorbalance << precision;
        return (temp1  temp2) / result;
    }

    
    function power(uint256 _basen, uint256 _based, uint32 _expn, uint32 _expd) internal constant returns (uint256, uint8) {
        uint256 lnbasetimesexp = ln(_basen, _based) * _expn / _expd;
        uint8 precision = findpositioninmaxexparray(lnbasetimesexp);
        return (fixedexp(lnbasetimesexp >> (max_precision  precision), precision), precision);
    }

    
    function ln(uint256 _numerator, uint256 _denominator) internal constant returns (uint256) {
        assert(_numerator <= max_num);

        uint256 res = 0;
        uint256 x = _numerator * fixed_1 / _denominator;

        
        if (x >= fixed_2) {
            uint8 count = floorlog2(x / fixed_1);
            x >>= count; 
            res = count * fixed_1;
        }

        
        if (x > fixed_1) {
            for (uint8 i = max_precision; i > 0; i) {
                x = (x * x) / fixed_1; 
                if (x >= fixed_2) {
                    x >>= 1; 
                    res += one << (i  1);
                }
            }
        }

        return (res * ln2_mantissa) >> ln2_exponent;
    }

    
    function floorlog2(uint256 _n) internal constant returns (uint8) {
        uint8 res = 0;

        if (_n < 256) {
            
            while (_n > 1) {
                _n >>= 1;
                res += 1;
            }
        }
        else {
            
            for (uint8 s = 128; s > 0; s >>= 1) {
                if (_n >= (one << s)) {
                    _n >>= s;
                    res |= s;
                }
            }
        }

        return res;
    }

    
    function findpositioninmaxexparray(uint256 _x) internal constant returns (uint8) {
        uint8 lo = min_precision;
        uint8 hi = max_precision;

        while (lo + 1 < hi) {
            uint8 mid = (lo + hi) / 2;
            if (maxexparray[mid] >= _x)
                lo = mid;
            else
                hi = mid;
        }

        if (maxexparray[hi] >= _x)
            return hi;
        if (maxexparray[lo] >= _x)
            return lo;

        assert(false);
        return 0;
    }

    
    function fixedexp(uint256 _x, uint8 _precision) internal constant returns (uint256) {
        uint256 xi = _x;
        uint256 res = 0;

        xi = (xi * _x) >> _precision;
        res += xi * 0x03442c4e6074a82f1797f72ac0000000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x0116b96f757c380fb287fd0e40000000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x0045ae5bdd5f0e03eca1ff4390000000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x000defabf91302cd95b9ffda50000000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x0002529ca9832b22439efff9b8000000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x000054f1cf12bd04e516b6da88000000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x00000a9e39e257a09ca2d6db51000000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x0000012e066e7b839fa050c309000000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x0000001e33d7d926c329a1ad1a800000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x00000002bee513bdb4a6b19b5f800000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x000000003a9316fa79b88eccf2a00000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x00000000048177ebe1fa812375200000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x00000000005263fe90242dcbacf00000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x0000000000057e22099c030d94100000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x00000000000057e22099c030d9410000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x000000000000052b6b54569976310000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x000000000000004985f67696bf748000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x0000000000000003dea12ea99e498000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x000000000000000031880f2214b6e000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x0000000000000000025bcff56eb36000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x0000000000000000001b722e10ab1000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x00000000000000000001317c70077000; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x000000000000000000000cba84aafa00; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x000000000000000000000082573a0a00; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x000000000000000000000005035ad900; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x0000000000000000000000002f881b00; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x00000000000000000000000001b29340; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x000000000000000000000000000efc40; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x00000000000000000000000000007fe0; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x00000000000000000000000000000420; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x00000000000000000000000000000021; 
        xi = (xi * _x) >> _precision;
        res += xi * 0x00000000000000000000000000000001; 

        return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (one << _precision); 
    }
}

pragma solidity ^0.4.11;
import ;
import ;


contract bancorconverterextensions is ibancorconverterextensions, tokenholder {
    ibancorformula public formula;  
    ibancorgaspricelimit public gaspricelimit; 
    ibancorquickconverter public quickconverter; 

    
    function bancorconverterextensions(ibancorformula _formula, ibancorgaspricelimit _gaspricelimit, ibancorquickconverter _quickconverter)
        validaddress(_formula)
        validaddress(_gaspricelimit)
        validaddress(_quickconverter)
    {
        formula = _formula;
        gaspricelimit = _gaspricelimit;
        quickconverter = _quickconverter;
    }

    
    function setformula(ibancorformula _formula)
        public
        owneronly
        validaddress(_formula)
        notthis(_formula)
    {
        formula = _formula;
    }

    
    function setgaspricelimit(ibancorgaspricelimit _gaspricelimit)
        public
        owneronly
        validaddress(_gaspricelimit)
        notthis(_gaspricelimit)
    {
        gaspricelimit = _gaspricelimit;
    }

    
    function setquickconverter(ibancorquickconverter _quickconverter)
        public
        owneronly
        validaddress(_quickconverter)
        notthis(_quickconverter)
    {
        quickconverter = _quickconverter;
    }
}

pragma solidity ^0.4.11;
import ;
import ;
import ;
import ;


contract ethertoken is iethertoken, owned, erc20token, tokenholder {
    
    event issuance(uint256 _amount);
    
    event destruction(uint256 _amount);

    
    function ethertoken()
        erc20token(, , 18) {
    }

    
    function deposit() public payable {
        balanceof[msg.sender] = safeadd(balanceof[msg.sender], msg.value); 
        totalsupply = safeadd(totalsupply, msg.value); 

        issuance(msg.value);
        transfer(this, msg.sender, msg.value);
    }

    
    function withdraw(uint256 _amount) public {
        withdrawto(msg.sender, _amount);
    }

    
    function withdrawto(address _to, uint256 _amount)
        public
        notthis(_to)
    {
        balanceof[msg.sender] = safesub(balanceof[msg.sender], _amount); 
        totalsupply = safesub(totalsupply, _amount); 
        _to.transfer(_amount); 

        transfer(msg.sender, this, _amount);
        destruction(_amount);
    }

    

    
    function transfer(address _to, uint256 _value)
        public
        notthis(_to)
        returns (bool success)
    {
        assert(super.transfer(_to, _value));
        return true;
    }

    
    function transferfrom(address _from, address _to, uint256 _value)
        public
        notthis(_to)
        returns (bool success)
    {
        assert(super.transferfrom(_from, _to, _value));
        return true;
    }

    
    function() public payable {
        deposit();
    }
}

pragma solidity ^0.4.11;
import ;
import ;


contract itokenholder is iowned {
    function withdrawtokens(ierc20token _token, address _to, uint256 _amount) public;
}

pragma solidity ^0.4.11;


contract iowned {
    
    function owner() public constant returns (address) {}

    function transferownership(address _newowner) public;
    function acceptownership() public;
}

pragma solidity ^0.4.11;
import ;


contract ibancorquickconverter {
    function convert(ierc20token[] _path, uint256 _amount, uint256 _minreturn) public payable returns (uint256);
    function convertfor(ierc20token[] _path, uint256 _amount, uint256 _minreturn, address _for) public payable returns (uint256);
}

pragma solidity ^0.4.11;
import ;


contract itokenconverter {
    function convertibletokencount() public constant returns (uint16);
    function convertibletoken(uint16 _tokenindex) public constant returns (address);
    function getreturn(ierc20token _fromtoken, ierc20token _totoken, uint256 _amount) public constant returns (uint256);
    function convert(ierc20token _fromtoken, ierc20token _totoken, uint256 _amount, uint256 _minreturn) public returns (uint256);
    
    function change(ierc20token _fromtoken, ierc20token _totoken, uint256 _amount, uint256 _minreturn) public returns (uint256);
}

pragma solidity ^0.4.11;
import ;
import ;
import ;


contract ibancorconverterextensions {
    function formula() public constant returns (ibancorformula) {}
    function gaspricelimit() public constant returns (ibancorgaspricelimit) {}
    function quickconverter() public constant returns (ibancorquickconverter) {}
}

pragma solidity ^0.4.11;
import ;
import ;


contract ismarttoken is iowned, ierc20token {
    function disabletransfers(bool _disable) public;
    function issue(address _to, uint256 _amount) public;
    function destroy(address _from, uint256 _amount) public;
}

pragma solidity ^0.4.11;


contract ibancorformula {
    function calculatepurchasereturn(uint256 _supply, uint256 _connectorbalance, uint32 _connectorweight, uint256 _depositamount) public constant returns (uint256);
    function calculatesalereturn(uint256 _supply, uint256 _connectorbalance, uint32 _connectorweight, uint256 _sellamount) public constant returns (uint256);
}

pragma solidity ^0.4.11;


contract ibancorgaspricelimit {
    function gasprice() public constant returns (uint256) {}
}

pragma solidity ^0.4.11;


contract ierc20token {
    
    function name() public constant returns (string) {}
    function symbol() public constant returns (string) {}
    function decimals() public constant returns (uint8) {}
    function totalsupply() public constant returns (uint256) {}
    function balanceof(address _owner) public constant returns (uint256) { _owner; }
    function allowance(address _owner, address _spender) public constant returns (uint256) { _owner; _spender; }

    function transfer(address _to, uint256 _value) public returns (bool success);
    function transferfrom(address _from, address _to, uint256 _value) public returns (bool success);
    function approve(address _spender, uint256 _value) public returns (bool success);
}

pragma solidity ^0.4.11;
import ;
import ;


contract iethertoken is itokenholder, ierc20token {
    function deposit() public payable;
    function withdraw(uint256 _amount) public;
    function withdrawto(address _to, uint256 _amount);
}

pragma solidity ^0.4.11;
import ;


contract testcrowdsalecontroller is crowdsalecontroller {
    function testcrowdsalecontroller(
        ismarttoken _token,
        uint256 _starttime,
        address _beneficiary,
        address _btcs,
        bytes32 _realethercaphash,
        uint256 _starttimeoverride)
        crowdsalecontroller(_token, _starttime, _beneficiary, _btcs, _realethercaphash)
    {
        starttime = _starttimeoverride;
        endtime = starttime + duration;
    }
}

pragma solidity ^0.4.11;
import ;


contract testbancorformula is bancorformula {
    function testbancorformula() {
    }

    function powertest(uint256 _basen, uint256 _based, uint32 _expn, uint32 _expd) public constant returns (uint256, uint8) {
        return super.power(_basen, _based, _expn, _expd);
    }

    function lntest(uint256 _numerator, uint256 _denominator) public constant returns (uint256) {
        return super.ln(_numerator, _denominator);
    }

    function findpositioninmaxexparraytest(uint256 _x) public constant returns (uint8) {
        return super.findpositioninmaxexparray(_x);
    }

    function fixedexptest(uint256 _x, uint8 _precision) public constant returns (uint256) {
        return super.fixedexp(_x, _precision);
    }

    function floorlog2test(uint256 _n) public constant returns (uint8) {
        return super.floorlog2(_n);
    }
}

pragma solidity ^0.4.11;
import ;


contract testutils is utils {
    function testutils() {
    }

    function testsafeadd(uint256 _x, uint256 _y) public constant returns (uint256) {
        return super.safeadd(_x, _y);
    }

    function testsafesub(uint256 _x, uint256 _y) public constant returns (uint256) {
        return super.safesub(_x, _y);
    }

    function testsafemul(uint256 _x, uint256 _y) public constant returns (uint256) {
        return super.safemul(_x, _y);
    }
}

pragma solidity ^0.4.11;

contract migrations {
    address public owner;
    uint public last_completed_migration;

    modifier restricted() {
        if (msg.sender == owner) _;
    }

    function migrations() {
        owner = msg.sender;
    }

    function setcompleted(uint completed) restricted {
        last_completed_migration = completed;
    }

    function upgrade(address new_address) restricted {
        migrations upgraded = migrations(new_address);
        upgraded.setcompleted(last_completed_migration);
    }
}

pragma solidity ^0.4.11;
import ;


contract testerc20token is erc20token {
    function testerc20token(string _name, string _symbol, uint256 _supply)
        erc20token(_name, _symbol, 0)
    {
        totalsupply = _supply;
        balanceof[msg.sender] = _supply;
    }
}

