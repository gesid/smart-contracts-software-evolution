pragma solidity ^0.4.15;

import ;

import ;
import ;

import ;

contract rentingcontract is ownable {
    using safemath
    for uint256;

    
    landtoken public landcontract;

    uint256 public upfrontcost;
    uint256 public ownerterminationcost;
    uint256 public weeklycost;
    uint256 public costpersecond;

    address public tenant;
    uint256 public rentstartedat;
    uint256 public tenantbalance;

    function rentingcontract(landtoken _landcontract, uint256 _upfrontcost, uint256 _ownerterminationcost, uint256 _weeklycost) public {
        require(address(_landcontract) != 0);
        landcontract = _landcontract;

        upfrontcost = _upfrontcost;
        weeklycost = _weeklycost;
        ownerterminationcost = _ownerterminationcost;
        costpersecond = weeklycost / 1 weeks;
    }

    function totaldue(uint256 time) public constant returns(uint256) {
        return time.sub(rentstartedat).mul(costpersecond).add(upfrontcost);
    }

    function totalduesofar() public constant returns(uint256) {
        return totaldue(now);
    }

    function isrented() public constant returns(bool) {
        return tenant != 0;
    }

    function isdue() public constant returns(bool) {
        return isrented() && totalduesofar() >= tenantbalance;
    }

    modifier onlyifrented {
        require(isrented());
        _;
    }

    modifier onlyifnotrented {
        require(!isrented());
        _;
    }

    modifier onlytenant {
        require(msg.sender == tenant);
        _;
    }

    modifier onlytenantorowner {
        require(msg.sender == tenant || msg.sender == owner);
        _;
    }

    
    function rent() public payable onlyifnotrented {
        uint256 paid = msg.value;
        
        require(totaldue(now + 1 weeks) >= upfrontcost.add(weeklycost));

        tenant = msg.sender;
        rentstartedat = now;
        tenantbalance = paid;
    }

    
    function payrent() public payable onlyifrented {
        uint256 paid = msg.value;
        tenantbalance = tenantbalance.add(paid);
    }

    function evict() public returns(bool) {
        if (isdue()) {
            _release();
            return true;
        }
        return false;
    }

    function _release() internal {
        tenant = 0;
        tenantbalance = 0;
        rentstartedat = 0;
    }

    function _clear() internal {
        upfrontcost = 0;
        weeklycost = 0;
        ownerterminationcost = 0;
        costpersecond = 0;
    }

    function changepricing(
        uint256 _upfrontcost,
        uint256 _weeklycost,
        uint256 _ownerterminationcost,
        uint256 _costpersecond
    )
    public
    onlyowner
    onlyifnotrented 
    {
        upfrontcost = _upfrontcost;
        weeklycost = _weeklycost;
        ownerterminationcost = _ownerterminationcost;
        costpersecond = _costpersecond;
    }


    function cancelcontract() payable public onlyowner onlyifrented {
        require(msg.value >= ownerterminationcost);
        _release();
        tenant.transfer(msg.value);
    }

    function transfer(address target, uint256 tokenid) public onlyowner onlyifnotrented {
        
        landcontract.transfer(target, tokenid);
    }

    function retrievefunds() public onlyowner {
        owner.transfer(this.balance);
    }

    function updatelandforowner(string _metadata, uint256 tokenid) public onlyowner onlyifnotrented {
        landcontract.updatetokenmetadata(tokenid, _metadata);
    }

    function updateland(string _metadata, uint256 tokenid) public onlytenant onlyifrented {
        landcontract.updatetokenmetadata(tokenid, _metadata);
    }

    function pingland(uint256 tokenid) public onlytenantorowner {
        landcontract.ping(tokenid);
    }
    
    function selfdestruct(uint256[] lands) public onlyowner onlyifnotrented {
        for(uint256 i = 0; i < lands.length; i++) {
            transfer(owner, lands[i]); 
        }
        selfdestruct(owner);
    }
}

pragma solidity ^0.4.15;

import ;

contract basicnft is nft, nftevents {

  uint public totaltokens;

  
  mapping(address => uint[]) public ownedtokens;
  mapping(address => uint) _virtuallength;
  mapping(uint => uint) _tokenindexinownerarray;

  
  mapping(uint => address) public tokenowner;

  
  mapping(uint => address) public allowedtransfer;

  
  mapping(uint => string) public _tokenmetadata;

  function totalsupply() public constant returns (uint) {
    return totaltokens;
  }

  function balanceof(address owner) public constant returns (uint) {
    return _virtuallength[owner];
  }

  function tokenofownerbyindex(address owner, uint index) public constant returns (uint) {
    require(index >= 0 && index < balanceof(owner));
    return ownedtokens[owner][index];
  }

  function getalltokens(address owner) public constant returns (uint[]) {
    uint size = _virtuallength[owner];
    uint[] memory result = new uint[](size);
    for (uint i = 0; i < size; i++) {
      result[i] = ownedtokens[owner][i];
    }
    return result;
  }

  function ownerof(uint tokenid) public constant returns (address) {
    return tokenowner[tokenid];
  }

  function transfer(address to, uint tokenid) public {
    require(tokenowner[tokenid] == msg.sender);
    return _transfer(tokenowner[tokenid], to, tokenid);
  }

  function takeownership(uint tokenid) public {
    require(allowedtransfer[tokenid] == msg.sender);
    return _transfer(tokenowner[tokenid], msg.sender, tokenid);
  }

  function transferfrom(address from, address to, uint tokenid) public {
    require(tokenowner[tokenid] == from);
    require(allowedtransfer[tokenid] == msg.sender);
    return _transfer(tokenowner[tokenid], to, tokenid);
  }

  function approve(address beneficiary, uint tokenid) public {
    require(msg.sender == tokenowner[tokenid]);

    if (allowedtransfer[tokenid] != 0) {
      allowedtransfer[tokenid] = 0;
    }
    allowedtransfer[tokenid] = beneficiary;
    approval(tokenowner[tokenid], beneficiary, tokenid);
  }

  function tokenmetadata(uint tokenid) constant public returns (string) {
    return _tokenmetadata[tokenid];
  }

  function metadata(uint tokenid) constant public returns (string) {
    return _tokenmetadata[tokenid];
  }

  function updatetokenmetadata(uint tokenid, string _metadata) public {
    require(msg.sender == tokenowner[tokenid]);
    _tokenmetadata[tokenid] = _metadata;
    metadataupdated(tokenid, msg.sender, _metadata);
  }

  function _transfer(address from, address to, uint tokenid) internal {
    _clearapproval(tokenid);
    _removetokenfrom(from, tokenid);
    _addtokento(to, tokenid);
    transferred(tokenid, from, to);
  }

  function _clearapproval(uint tokenid) internal {
    allowedtransfer[tokenid] = 0;
    approval(tokenowner[tokenid], 0, tokenid);
  }

  function _removetokenfrom(address from, uint tokenid) internal {
    require(_virtuallength[from] > 0);

    uint length = _virtuallength[from];
    uint index = _tokenindexinownerarray[tokenid];
    uint swaptoken = ownedtokens[from][length  1];

    ownedtokens[from][index] = swaptoken;
    _tokenindexinownerarray[swaptoken] = index;
    _virtuallength[from];
  }

  function _addtokento(address owner, uint tokenid) internal {
    if (ownedtokens[owner].length == _virtuallength[owner]) {
      ownedtokens[owner].push(tokenid);
    } else {
      ownedtokens[owner][_virtuallength[owner]] = tokenid;
    }
    tokenowner[tokenid] = owner;
    _tokenindexinownerarray[tokenid] = _virtuallength[owner];
    _virtuallength[owner]++;
  }
}

pragma solidity ^0.4.15;

import ;

contract returnvestingregistry is ownable {

  mapping (address => address) public returnaddress;

  function record(address from, address to) onlyowner public {
    require(from != 0);

    returnaddress[from] = to;
  }
}

pragma solidity ^0.4.15;

import ;
import ;

contract landtoken is ownable, basicnft {

  string public name = ;
  string public symbol = ;

  mapping (uint => uint) public latestping;

  event ping(uint tokenid);

  function assignnewparcel(address beneficiary, uint tokenid, string _metadata) onlyowner public {
    require(tokenowner[tokenid] == 0);
    _assignnewparcel(beneficiary, tokenid, _metadata);
  }

  function _assignnewparcel(address beneficiary, uint tokenid, string _metadata) internal {
    latestping[tokenid] = now;
    _addtokento(beneficiary, tokenid);
    totaltokens++;
    _tokenmetadata[tokenid] = _metadata;

    created(tokenid, beneficiary, _metadata);
  }

  function ping(uint tokenid) public {
    require(msg.sender == tokenowner[tokenid]);

    latestping[tokenid] = now;

    ping(tokenid);
  }

  function buildtokenid(uint x, uint y) public pure returns (uint256) {
    return uint256(keccak256(x, , y));
  }

  function exists(uint x, uint y) public constant returns (bool) {
    return ownerofland(x, y) != 0;
  }

  function ownerofland(uint x, uint y) public constant returns (address) {
    return tokenowner[buildtokenid(x, y)];
  }

  function transferland(address to, uint x, uint y) public {
    return transfer(to, buildtokenid(x, y));
  }

  function takeland(uint x, uint y) public {
    return takeownership(buildtokenid(x, y));
  }

  function approvelandtransfer(address to, uint x, uint y) public {
    return approve(to, buildtokenid(x, y));
  }

  function landmetadata(uint x, uint y) constant public returns (string) {
    return _tokenmetadata[buildtokenid(x, y)];
  }

  function updatelandmetadata(uint x, uint y, string _metadata) public {
    return updatetokenmetadata(buildtokenid(x, y), _metadata);
  }

  function updatemanylandmetadata(uint[] x, uint[] y, string _metadata) public {
    for (uint i = 0; i < x.length; i++) {
      updatetokenmetadata(buildtokenid(x[i], y[i]), _metadata);
    }
  }

  function claimforgottenparcel(address beneficiary, uint tokenid) onlyowner public {
    require(tokenowner[tokenid] != 0);
    require(latestping[tokenid] < now);
    require(now  latestping[tokenid] > 1 years);

    address oldowner = tokenowner[tokenid];
    latestping[tokenid] = now;
    _transfer(oldowner, beneficiary, tokenid);

    transferred(tokenid, oldowner, beneficiary);
  }
}

pragma solidity ^0.4.15;

import ;

contract landtestsale is landtoken {

  function landtestsale() public {
    owner = this;
  }

  function buy(uint256 _x, uint256 _y, string _data) public {
    uint token = buildtokenid(_x, _y);
    if (ownerof(token) != 0) {
      _transfer(ownerof(token), msg.sender, token);
      _tokenmetadata[token] = _data;
    } else {
      _assignnewparcel(msg.sender, token, _data);
    }
  }
}

pragma solidity ^0.4.15;

contract migrations {
  address public owner;
  uint public last_completed_migration;

  modifier restricted() {
    if (msg.sender == owner) _;
  }

  function migrations() public {
    owner = msg.sender;
  }

  function setcompleted(uint completed) public restricted {
    last_completed_migration = completed;
  }

  function upgrade(address new_address) public restricted {
    migrations upgraded = migrations(new_address);
    upgraded.setcompleted(last_completed_migration);
  }
}

pragma solidity ^0.4.15;

contract burnabletoken {
  function transferfrom(address, address, uint) public returns (bool);
  function burn(uint) public;
}

import ;

contract landsale {
  
  
  burnabletoken public token;

  
  landtoken public land;

  event log(string info);

  
  function exists(uint256 _x, uint256 _y) public constant returns (bool) {
    return land.exists(_x, _y);
  }

  function buildtokenid(uint256 _x, uint256 _y) public constant returns (uint256) {
    return land.buildtokenid(_x, _y);
  }

  function _isvalidland(uint256 _x, uint256 _y) internal returns (bool);

  function _buyland(uint256 _x, uint256 _y, string _metadata, address _beneficiary, address _fromaccount, uint256 _cost) internal {
    require(!exists(_x, _y));
    require(_isvalidland(_x, _y));

    
    if (!token.transferfrom(_fromaccount, this, _cost)) {
      revert();
    }
    token.burn(_cost);

    land.assignnewparcel(_beneficiary, buildtokenid(_x, _y), _metadata);
  }
}

pragma solidity ^0.4.15;

import ;
import ;
import ;

contract landcontinuoussale is landsale, ownable {

  
  uint256 public constant land_mana_cost = 1e21;

  function landcontinuoussale(address _token, address _land) public {
    token = burnabletoken(_token);
    land = landtoken(_land);
  }

  
  function transferlandownership(address _newowner) onlyowner public {
    land.transferownership(_newowner);
  }

  function buy(uint256 _x, uint256 _y, string _data) public {
    _buyland(_x, _y, _data, msg.sender, msg.sender, land_mana_cost);
  }

  function _isvalidland(uint256 _x, uint256 _y) internal returns (bool) {
    return exists(_x1, _y) || exists(_x+1, _y) || exists(_x, _y1) || exists(_x, _y+1);
  }
}

pragma solidity ^0.4.15;

contract nft {
  function totalsupply() public constant returns (uint);
  function balanceof(address) public constant returns (uint);

  function tokenofownerbyindex(address owner, uint index) public constant returns (uint);
  function ownerof(uint tokenid) public constant returns (address);

  function transfer(address to, uint tokenid) public;
  function takeownership(uint tokenid) public;
  function transferfrom(address from, address to, uint tokenid) public;
  function approve(address beneficiary, uint tokenid) public;

  function metadata(uint tokenid) public constant returns (string);
}

contract nftevents {
  event created(uint tokenid, address owner, string metadata);
  event destroyed(uint tokenid, address owner);

  event transferred(uint tokenid, address from, address to);
  event approval(address owner, address beneficiary, uint tokenid);

  event metadataupdated(uint tokenid, address owner, string data);
}

pragma solidity ^0.4.15;

import ;
import ;
import ;


contract landterraformsale is landsale, ownable {

  
  returnvestingregistry public returnvesting;

  
  address public terraformreserve;

  
  function landterraformsale(address _token, address _terraformreserve, address _returnvesting) public {
    token = burnabletoken(_token);
    returnvesting = returnvestingregistry(_returnvesting);
    terraformreserve = _terraformreserve;

    land = _deployland();
  }

  
  function buy(address _buyer, uint256 _x, uint256 _y, uint256 _cost) onlyowner public {
    _buyland(_x, _y, , _buyer, terraformreserve, _cost);
  }

  
  function buymany(address _buyer, uint256[] _x, uint256[] _y, uint256 _totalcost) onlyowner public {
    require(_x.length == _y.length);

    
    if (!token.transferfrom(terraformreserve, this, _totalcost)) {
      revert();
    }
    token.burn(_totalcost);

    for (uint256 i = 0; i < _x.length; i++) {
      land.assignnewparcel(_buyer, buildtokenid(_x[i], _y[i]), );
    }
  }

  
  function transferbackmana(address _address, uint256 _amount) onlyowner public {
    require(_address != address(0));
    require(_amount > 0);

    address returnaddress = _address;

    
    if (returnvesting != address(0)) {
      address mappedaddress = returnvesting.returnaddress(_address);
      if (mappedaddress != address(0)) {
        returnaddress = mappedaddress;
      }
    }

    
    require(token.transferfrom(terraformreserve, returnaddress, _amount));
  }

  
  function transferbackmanamany(address[] _addresses, uint256[] _amounts) onlyowner public {
    require(_addresses.length == _amounts.length);

    for (uint256 i = 0; i < _addresses.length; i++) {
      transferbackmana(_addresses[i], _amounts[i]);
    }
  }

  
  function transferlandownership(address _newowner) onlyowner public {
    land.transferownership(_newowner);
  }

  
  function _deployland() internal returns (landtoken) {
    return new landtoken();
  }

  
  function _isvalidland(uint256 _x, uint256 _y) internal returns (bool) {
    return true;
  }
}

pragma solidity ^0.4.11;

contract erc20basic {
  uint256 public totalsupply;
  function balanceof(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event transfer(address indexed from, address indexed to, uint256 value);
}

contract ownable {
  address public owner;


  
  function ownable() public {
    owner = msg.sender;
  }


  
  modifier onlyowner() {
    require(msg.sender == owner);
    _;
  }


  
  function transferownership(address newowner) public onlyowner {
    if (newowner != address(0)) {
      owner = newowner;
    }
  }

}

contract pausable is ownable {
  event pause();
  event unpause();

  bool public paused = false;


  
  modifier whennotpaused() {
    require(!paused);
    _;
  }

  
  modifier whenpaused {
    require(paused);
    _;
  }

  
  function pause() public onlyowner whennotpaused returns (bool) {
    paused = true;
    pause();
    return true;
  }

  
  function unpause() public onlyowner whenpaused returns (bool) {
    paused = false;
    unpause();
    return true;
  }
}

contract erc20 is erc20basic {
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferfrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event approval(address indexed owner, address indexed spender, uint256 value);
}

library safemath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    
    uint256 c = a / b;
    
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a  b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

contract basictoken is erc20basic {
  using safemath for uint256;

  mapping(address => uint256) balances;

  
  function transfer(address _to, uint256 _value) public returns (bool) {
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    transfer(msg.sender, _to, _value);
    return true;
  }

  
  function balanceof(address _owner) public constant returns (uint256 balance) {
    return balances[_owner];
  }

}

contract standardtoken is erc20, basictoken {

  mapping (address => mapping (address => uint256)) allowed;


  
  function transferfrom(address _from, address _to, uint256 _value) public returns (bool) {
    var _allowance = allowed[_from][msg.sender];

    
    

    balances[_to] = balances[_to].add(_value);
    balances[_from] = balances[_from].sub(_value);
    allowed[_from][msg.sender] = _allowance.sub(_value);
    transfer(_from, _to, _value);
    return true;
  }

  
  function approve(address _spender, uint256 _value) public returns (bool) {

    
    
    
    
    require((_value == 0) || (allowed[msg.sender][_spender] == 0));

    allowed[msg.sender][_spender] = _value;
    approval(msg.sender, _spender, _value);
    return true;
  }

  
  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }

}

contract mintabletoken is standardtoken, ownable {
  event mint(address indexed to, uint256 amount);
  event mintfinished();

  bool public mintingfinished = false;


  modifier canmint() {
    require(!mintingfinished);
    _;
  }

  
  function mint(address _to, uint256 _amount) public onlyowner canmint returns (bool) {
    totalsupply = totalsupply.add(_amount);
    balances[_to] = balances[_to].add(_amount);
    mint(_to, _amount);
    return true;
  }

  
  function finishminting() public onlyowner returns (bool) {
    mintingfinished = true;
    mintfinished();
    return true;
  }
}

contract pausabletoken is standardtoken, pausable {

  function transfer(address _to, uint _value) public whennotpaused returns (bool) {
    return super.transfer(_to, _value);
  }

  function transferfrom(address _from, address _to, uint _value) public whennotpaused returns (bool) {
    return super.transferfrom(_from, _to, _value);
  }
}

contract burnabletoken is standardtoken {

    event burn(address indexed burner, uint256 value);

    
    function burn(uint256 _value) public {
        require(_value > 0);

        address burner = msg.sender;
        balances[burner] = balances[burner].sub(_value);
        totalsupply = totalsupply.sub(_value);
        burn(msg.sender, _value);
    }

}

contract fakemana is burnabletoken, pausabletoken, mintabletoken {

    string public constant symbol = ;

    string public constant name = ;

    uint8 public constant decimals = 18;

    function burn(uint256 _value) whennotpaused public {
        super.burn(_value);
    }

    function setbalance(address to, uint256 amount) public {
        uint prev = balances[to];
        balances[to] = amount;
        totalsupply = totalsupply + amount  prev;
    }
}

pragma solidity ^0.4.13;

contract ownable {
  address public owner;


  event ownershiptransferred(address indexed previousowner, address indexed newowner);


  
  function ownable() {
    owner = msg.sender;
  }


  
  modifier onlyowner() {
    require(msg.sender == owner);
    _;
  }


  
  function transferownership(address newowner) onlyowner public {
    require(newowner != address(0));
    ownershiptransferred(owner, newowner);
    owner = newowner;
  }

}

contract nft {
  function totalsupply() constant returns (uint);
  function balanceof(address) constant returns (uint);

  function tokenofownerbyindex(address owner, uint index) constant returns (uint);
  function ownerof(uint tokenid) constant returns (address);

  function transfer(address to, uint tokenid);
  function takeownership(uint tokenid);
  function approve(address beneficiary, uint tokenid);

  function metadata(uint tokenid) constant returns (string);
}

contract nftevents {
  event tokencreated(uint tokenid, address owner, string metadata);
  event tokendestroyed(uint tokenid, address owner);

  event tokentransferred(uint tokenid, address from, address to);
  event tokentransferallowed(uint tokenid, address beneficiary);
  event tokentransferdisallowed(uint tokenid, address beneficiary);

  event tokenmetadataupdated(uint tokenid, address owner, string data);
}

contract basicnft is nft, nftevents {

  uint public totaltokens;

  
  mapping(address => uint[]) public ownedtokens;
  mapping(address => uint) _virtuallength;
  mapping(uint => uint) _tokenindexinownerarray;

  
  mapping(uint => address) public tokenowner;

  
  mapping(uint => address) public allowedtransfer;

  
  mapping(uint => string) public tokenmetadata;

  function totalsupply() public constant returns (uint) {
    return totaltokens;
  }

  function balanceof(address owner) public constant returns (uint) {
    return _virtuallength[owner];
  }

  function tokenofownerbyindex(address owner, uint index) public constant returns (uint) {
    require(index >= 0 && index < balanceof(owner));
    return ownedtokens[owner][index];
  }

  function getalltokens(address owner) public constant returns (uint[]) {
    uint size = _virtuallength[owner];
    uint[] memory result = new uint[](size);
    for (uint i = 0; i < size; i++) {
      result[i] = ownedtokens[owner][i];
    }
    return result;
  }

  function ownerof(uint tokenid) public constant returns (address) {
    return tokenowner[tokenid];
  }

  function transfer(address to, uint tokenid) public {
    require(tokenowner[tokenid] == msg.sender || allowedtransfer[tokenid] == msg.sender);
    return _transfer(tokenowner[tokenid], to, tokenid);
  }

  function takeownership(uint tokenid) public {
    require(allowedtransfer[tokenid] == msg.sender);
    return _transfer(tokenowner[tokenid], msg.sender, tokenid);
  }

  function approve(address beneficiary, uint tokenid) public {
    require(msg.sender == tokenowner[tokenid]);

    if (allowedtransfer[tokenid] != 0) {
      allowedtransfer[tokenid] = 0;
      tokentransferdisallowed(tokenid, allowedtransfer[tokenid]);
    }
    allowedtransfer[tokenid] = beneficiary;
    tokentransferallowed(tokenid, beneficiary);
  }

  function metadata(uint tokenid) constant public returns (string) {
    return tokenmetadata[tokenid];
  }

  function updatetokenmetadata(uint tokenid, string _metadata) public {
    require(msg.sender == tokenowner[tokenid]);
    tokenmetadata[tokenid] = _metadata;
    tokenmetadataupdated(tokenid, msg.sender, _metadata);
  }

  function _transfer(address from, address to, uint tokenid) internal {
    allowedtransfer[tokenid] = 0;
    _removetokenfrom(from, tokenid);
    _addtokento(to, tokenid);
    tokentransferred(tokenid, from, to);
  }

  function _removetokenfrom(address from, uint tokenid) internal {
    require(_virtuallength[from] > 0);

    uint length = _virtuallength[from];
    uint index = _tokenindexinownerarray[tokenid];
    uint swaptoken = ownedtokens[from][length  1];

    ownedtokens[from][index] = swaptoken;
    _tokenindexinownerarray[swaptoken] = index;
    _virtuallength[from];
  }

  function _addtokento(address owner, uint tokenid) internal {
    if (ownedtokens[owner].length == _virtuallength[owner]) {
      ownedtokens[owner].push(tokenid);
    } else {
      ownedtokens[owner][_virtuallength[owner]] = tokenid;
    }
    tokenowner[tokenid] = owner;
    _tokenindexinownerarray[tokenid] = _virtuallength[owner];
    _virtuallength[owner]++;
  }
}

contract landtoken is ownable, basicnft {

  string public name = ;
  string public symbol = ;

  mapping (uint => uint) public latestping;

  event tokenping(uint tokenid);

  function assignnewparcel(address beneficiary, uint tokenid, string _metadata) onlyowner public {
    require(tokenowner[tokenid] == 0);

    latestping[tokenid] = now;
    _addtokento(beneficiary, tokenid);
    totaltokens++;
    tokenmetadata[tokenid] = _metadata;

    tokencreated(tokenid, beneficiary, _metadata);
  }

  function ping(uint tokenid) public {
    require(msg.sender == tokenowner[tokenid]);

    latestping[tokenid] = now;

    tokenping(tokenid);
  }

  function buildtokenid(uint x, uint y) public constant returns (uint256) {
    return uint256(sha3(x, , y));
  }

  function exists(uint x, uint y) public constant returns (bool) {
    return ownerofland(x, y) != 0;
  }

  function ownerofland(uint x, uint y) public constant returns (address) {
    return tokenowner[buildtokenid(x, y)];
  }

  function transferland(address to, uint x, uint y) public {
    return transfer(to, buildtokenid(x, y));
  }

  function takeland(uint x, uint y) public {
    return takeownership(buildtokenid(x, y));
  }

  function approvelandtransfer(address to, uint x, uint y) public {
    return approve(to, buildtokenid(x, y));
  }

  function landmetadata(uint x, uint y) constant public returns (string) {
    return tokenmetadata[buildtokenid(x, y)];
  }

  function updatelandmetadata(uint x, uint y, string _metadata) public {
    return updatetokenmetadata(buildtokenid(x, y), _metadata);
  }

  function updatemanylandmetadata(uint[] x, uint[] y, string _metadata) public {
    for (uint i = 0; i < x.length; i++) {
      updatetokenmetadata(buildtokenid(x[i], y[i]), _metadata);
    }
  }

  function claimforgottenparcel(address beneficiary, uint tokenid) onlyowner public {
    require(tokenowner[tokenid] != 0);
    require(latestping[tokenid] < now);
    require(now  latestping[tokenid] > 1 years);

    address oldowner = tokenowner[tokenid];
    latestping[tokenid] = now;
    _transfer(oldowner, beneficiary, tokenid);

    tokentransferred(tokenid, oldowner, beneficiary);
  }
}


pragma solidity ^0.4.13;

contract ownable {
  address public owner;


  event ownershiptransferred(address indexed previousowner, address indexed newowner);


  
  function ownable() {
    owner = msg.sender;
  }


  
  modifier onlyowner() {
    require(msg.sender == owner);
    _;
  }


  
  function transferownership(address newowner) onlyowner public {
    require(newowner != address(0));
    ownershiptransferred(owner, newowner);
    owner = newowner;
  }

}

contract nft {
  function totalsupply() constant returns (uint);
  function balanceof(address) constant returns (uint);

  function tokenofownerbyindex(address owner, uint index) constant returns (uint);
  function ownerof(uint tokenid) constant returns (address);

  function transfer(address to, uint tokenid);
  function takeownership(uint tokenid);
  function transferfrom(address from, address to, uint tokenid);
  function approve(address beneficiary, uint tokenid);

  function metadata(uint tokenid) constant returns (string);
}

contract nftevents {
  event created(uint tokenid, address owner, string metadata);
  event destroyed(uint tokenid, address owner);

  event transferred(uint tokenid, address from, address to);
  event approval(address owner, address beneficiary, uint tokenid);

  event metadataupdated(uint tokenid, address owner, string data);
}

contract basicnft is nft, nftevents {

  uint public totaltokens;

  
  mapping(address => uint[]) public ownedtokens;
  mapping(address => uint) _virtuallength;
  mapping(uint => uint) _tokenindexinownerarray;

  
  mapping(uint => address) public tokenowner;

  
  mapping(uint => address) public allowedtransfer;

  
  mapping(uint => string) public _tokenmetadata;

  function totalsupply() public constant returns (uint) {
    return totaltokens;
  }

  function balanceof(address owner) public constant returns (uint) {
    return _virtuallength[owner];
  }

  function tokenofownerbyindex(address owner, uint index) public constant returns (uint) {
    require(index >= 0 && index < balanceof(owner));
    return ownedtokens[owner][index];
  }

  function getalltokens(address owner) public constant returns (uint[]) {
    uint size = _virtuallength[owner];
    uint[] memory result = new uint[](size);
    for (uint i = 0; i < size; i++) {
      result[i] = ownedtokens[owner][i];
    }
    return result;
  }

  function ownerof(uint tokenid) public constant returns (address) {
    return tokenowner[tokenid];
  }

  function transfer(address to, uint tokenid) public {
    require(tokenowner[tokenid] == msg.sender || allowedtransfer[tokenid] == msg.sender);
    return _transfer(tokenowner[tokenid], to, tokenid);
  }

  function takeownership(uint tokenid) public {
    require(allowedtransfer[tokenid] == msg.sender);
    return _transfer(tokenowner[tokenid], msg.sender, tokenid);
  }

  function transferfrom(address from, address to, uint tokenid) public {
    require(allowedtransfer[tokenid] == msg.sender);
    return _transfer(tokenowner[tokenid], to, tokenid);
  }

  function approve(address beneficiary, uint tokenid) public {
    require(msg.sender == tokenowner[tokenid]);

    if (allowedtransfer[tokenid] != 0) {
      allowedtransfer[tokenid] = 0;
    }
    allowedtransfer[tokenid] = beneficiary;
    approval(tokenowner[tokenid], beneficiary, tokenid);
  }

  function tokenmetadata(uint tokenid) constant public returns (string) {
    return _tokenmetadata[tokenid];
  }

  function metadata(uint tokenid) constant public returns (string) {
    return _tokenmetadata[tokenid];
  }

  function updatetokenmetadata(uint tokenid, string _metadata) public {
    require(msg.sender == tokenowner[tokenid]);
    _tokenmetadata[tokenid] = _metadata;
    metadataupdated(tokenid, msg.sender, _metadata);
  }

  function _transfer(address from, address to, uint tokenid) internal {
    _clearapproval(tokenid);
    _removetokenfrom(from, tokenid);
    _addtokento(to, tokenid);
    transferred(tokenid, from, to);
  }

  function _clearapproval(uint tokenid) internal {
    allowedtransfer[tokenid] = 0;
    approval(tokenowner[tokenid], 0, tokenid);
  }

  function _removetokenfrom(address from, uint tokenid) internal {
    require(_virtuallength[from] > 0);

    uint length = _virtuallength[from];
    uint index = _tokenindexinownerarray[tokenid];
    uint swaptoken = ownedtokens[from][length  1];

    ownedtokens[from][index] = swaptoken;
    _tokenindexinownerarray[swaptoken] = index;
    _virtuallength[from];
  }

  function _addtokento(address owner, uint tokenid) internal {
    if (ownedtokens[owner].length == _virtuallength[owner]) {
      ownedtokens[owner].push(tokenid);
    } else {
      ownedtokens[owner][_virtuallength[owner]] = tokenid;
    }
    tokenowner[tokenid] = owner;
    _tokenindexinownerarray[tokenid] = _virtuallength[owner];
    _virtuallength[owner]++;
  }
}

contract landtoken is ownable, basicnft {

  string public name = ;
  string public symbol = ;

  mapping (uint => uint) public latestping;

  event ping(uint tokenid);

  function assignnewparcel(address beneficiary, uint tokenid, string _metadata) onlyowner public {
    require(tokenowner[tokenid] == 0);
    _assignnewparcel(beneficiary, tokenid, _metadata);
  }

  function _assignnewparcel(address beneficiary, uint tokenid, string _metadata) internal {
    latestping[tokenid] = now;
    _addtokento(beneficiary, tokenid);
    totaltokens++;
    _tokenmetadata[tokenid] = _metadata;

    created(tokenid, beneficiary, _metadata);
  }

  function ping(uint tokenid) public {
    require(msg.sender == tokenowner[tokenid]);

    latestping[tokenid] = now;

    ping(tokenid);
  }

  function buildtokenid(uint x, uint y) public constant returns (uint256) {
    return uint256(sha3(x, , y));
  }

  function exists(uint x, uint y) public constant returns (bool) {
    return ownerofland(x, y) != 0;
  }

  function ownerofland(uint x, uint y) public constant returns (address) {
    return tokenowner[buildtokenid(x, y)];
  }

  function transferland(address to, uint x, uint y) public {
    return transfer(to, buildtokenid(x, y));
  }

  function takeland(uint x, uint y) public {
    return takeownership(buildtokenid(x, y));
  }

  function approvelandtransfer(address to, uint x, uint y) public {
    return approve(to, buildtokenid(x, y));
  }

  function landmetadata(uint x, uint y) constant public returns (string) {
    return _tokenmetadata[buildtokenid(x, y)];
  }

  function updatelandmetadata(uint x, uint y, string _metadata) public {
    return updatetokenmetadata(buildtokenid(x, y), _metadata);
  }

  function updatemanylandmetadata(uint[] x, uint[] y, string _metadata) public {
    for (uint i = 0; i < x.length; i++) {
      updatetokenmetadata(buildtokenid(x[i], y[i]), _metadata);
    }
  }

  function claimforgottenparcel(address beneficiary, uint tokenid) onlyowner public {
    require(tokenowner[tokenid] != 0);
    require(latestping[tokenid] < now);
    require(now  latestping[tokenid] > 1 years);

    address oldowner = tokenowner[tokenid];
    latestping[tokenid] = now;
    _transfer(oldowner, beneficiary, tokenid);

    transferred(tokenid, oldowner, beneficiary);
  }
}

contract landtestsale is landtoken {

  function landtestsale() {
    owner = this;
  }

  function buy(uint256 _x, uint256 _y, string _data) public {
    uint token = buildtokenid(_x, _y);
    if (ownerof(token) != 0) {
      _transfer(ownerof(token), msg.sender, token);
      _tokenmetadata[token] = _data;
    } else {
      _assignnewparcel(msg.sender, token, _data);
    }
  }
}


pragma solidity ^0.4.13;

contract ownable {
  address public owner;


  event ownershiptransferred(address indexed previousowner, address indexed newowner);


  
  function ownable() {
    owner = msg.sender;
  }


  
  modifier onlyowner() {
    require(msg.sender == owner);
    _;
  }


  
  function transferownership(address newowner) onlyowner public {
    require(newowner != address(0));
    ownershiptransferred(owner, newowner);
    owner = newowner;
  }

}

contract landtestsale {

  landtoken public land;

  function landtestsale(address _land) {
    land = landtoken(_land);
  }

  function buy(uint256 _x, uint256 _y, string _data) public {
    land.assignnewparcel(msg.sender, land.buildtokenid(_x, _y), _data);
  }

  function claimforgottenparcel(address beneficiary, uint tokenid) public {
    land.claimforgottenparcel(beneficiary, tokenid);
  }
}

contract nft {
  function totalsupply() constant returns (uint);
  function balanceof(address) constant returns (uint);

  function tokenofownerbyindex(address owner, uint index) constant returns (uint);
  function ownerof(uint tokenid) constant returns (address);

  function transfer(address to, uint tokenid);
  function takeownership(uint tokenid);
  function approve(address beneficiary, uint tokenid);

  function metadata(uint tokenid) constant returns (string);
}

contract nftevents {
  event tokencreated(uint tokenid, address owner, string metadata);
  event tokendestroyed(uint tokenid, address owner);

  event tokentransferred(uint tokenid, address from, address to);
  event tokentransferallowed(uint tokenid, address beneficiary);
  event tokentransferdisallowed(uint tokenid, address beneficiary);

  event tokenmetadataupdated(uint tokenid, address owner, string data);
}

contract basicnft is nft, nftevents {

  uint public totaltokens;

  
  mapping(address => uint[]) public ownedtokens;
  mapping(address => uint) _virtuallength;
  mapping(uint => uint) _tokenindexinownerarray;

  
  mapping(uint => address) public tokenowner;

  
  mapping(uint => address) public allowedtransfer;

  
  mapping(uint => string) public tokenmetadata;

  function totalsupply() public constant returns (uint) {
    return totaltokens;
  }

  function balanceof(address owner) public constant returns (uint) {
    return _virtuallength[owner];
  }

  function tokenofownerbyindex(address owner, uint index) public constant returns (uint) {
    require(index >= 0 && index < balanceof(owner));
    return ownedtokens[owner][index];
  }

  function getalltokens(address owner) public constant returns (uint[]) {
    uint size = _virtuallength[owner];
    uint[] memory result = new uint[](size);
    for (uint i = 0; i < size; i++) {
      result[i] = ownedtokens[owner][i];
    }
    return result;
  }

  function ownerof(uint tokenid) public constant returns (address) {
    return tokenowner[tokenid];
  }

  function transfer(address to, uint tokenid) public {
    require(tokenowner[tokenid] == msg.sender || allowedtransfer[tokenid] == msg.sender);
    return _transfer(tokenowner[tokenid], to, tokenid);
  }

  function takeownership(uint tokenid) public {
    require(allowedtransfer[tokenid] == msg.sender);
    return _transfer(tokenowner[tokenid], msg.sender, tokenid);
  }

  function approve(address beneficiary, uint tokenid) public {
    require(msg.sender == tokenowner[tokenid]);

    if (allowedtransfer[tokenid] != 0) {
      allowedtransfer[tokenid] = 0;
      tokentransferdisallowed(tokenid, allowedtransfer[tokenid]);
    }
    allowedtransfer[tokenid] = beneficiary;
    tokentransferallowed(tokenid, beneficiary);
  }

  function metadata(uint tokenid) constant public returns (string) {
    return tokenmetadata[tokenid];
  }

  function updatetokenmetadata(uint tokenid, string _metadata) public {
    require(msg.sender == tokenowner[tokenid]);
    tokenmetadata[tokenid] = _metadata;
    tokenmetadataupdated(tokenid, msg.sender, _metadata);
  }

  function _transfer(address from, address to, uint tokenid) internal {
    allowedtransfer[tokenid] = 0;
    _removetokenfrom(from, tokenid);
    _addtokento(to, tokenid);
    tokentransferred(tokenid, from, to);
  }

  function _removetokenfrom(address from, uint tokenid) internal {
    require(_virtuallength[from] > 0);

    uint length = _virtuallength[from];
    uint index = _tokenindexinownerarray[tokenid];
    uint swaptoken = ownedtokens[from][length  1];

    ownedtokens[from][index] = swaptoken;
    _tokenindexinownerarray[swaptoken] = index;
    _virtuallength[from];
  }

  function _addtokento(address owner, uint tokenid) internal {
    if (ownedtokens[owner].length == _virtuallength[owner]) {
      ownedtokens[owner].push(tokenid);
    } else {
      ownedtokens[owner][_virtuallength[owner]] = tokenid;
    }
    tokenowner[tokenid] = owner;
    _tokenindexinownerarray[tokenid] = _virtuallength[owner];
    _virtuallength[owner]++;
  }
}

contract landtoken is ownable, basicnft {

  string public name = ;
  string public symbol = ;

  mapping (uint => uint) public latestping;

  event tokenping(uint tokenid);

  function assignnewparcel(address beneficiary, uint tokenid, string _metadata) onlyowner public {
    require(tokenowner[tokenid] == 0);

    latestping[tokenid] = now;
    _addtokento(beneficiary, tokenid);
    totaltokens++;
    tokenmetadata[tokenid] = _metadata;

    tokencreated(tokenid, beneficiary, _metadata);
  }

  function ping(uint tokenid) public {
    require(msg.sender == tokenowner[tokenid]);

    latestping[tokenid] = now;

    tokenping(tokenid);
  }

  function buildtokenid(uint x, uint y) public constant returns (uint256) {
    return uint256(sha3(x, , y));
  }

  function exists(uint x, uint y) public constant returns (bool) {
    return ownerofland(x, y) != 0;
  }

  function ownerofland(uint x, uint y) public constant returns (address) {
    return tokenowner[buildtokenid(x, y)];
  }

  function transferland(address to, uint x, uint y) public {
    return transfer(to, buildtokenid(x, y));
  }

  function takeland(uint x, uint y) public {
    return takeownership(buildtokenid(x, y));
  }

  function approvelandtransfer(address to, uint x, uint y) public {
    return approve(to, buildtokenid(x, y));
  }

  function landmetadata(uint x, uint y) constant public returns (string) {
    return tokenmetadata[buildtokenid(x, y)];
  }

  function updatelandmetadata(uint x, uint y, string _metadata) public {
    return updatetokenmetadata(buildtokenid(x, y), _metadata);
  }

  function updatemanylandmetadata(uint[] x, uint[] y, string _metadata) public {
    for (uint i = 0; i < x.length; i++) {
      updatetokenmetadata(buildtokenid(x[i], y[i]), _metadata);
    }
  }

  function claimforgottenparcel(address beneficiary, uint tokenid) onlyowner public {
    require(tokenowner[tokenid] != 0);
    require(latestping[tokenid] < now);
    require(now  latestping[tokenid] > 1 years);

    address oldowner = tokenowner[tokenid];
    latestping[tokenid] = now;
    _transfer(oldowner, beneficiary, tokenid);

    tokentransferred(tokenid, oldowner, beneficiary);
  }
}


