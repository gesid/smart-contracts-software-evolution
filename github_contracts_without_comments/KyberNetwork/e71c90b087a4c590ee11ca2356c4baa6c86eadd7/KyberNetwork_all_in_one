pragma solidity ^0.4.23;

contract migrations {
  address public owner;
  uint public last_completed_migration;

  constructor() public {
    owner = msg.sender;
  }

  modifier restricted() {
    if (msg.sender == owner) _;
  }

  function setcompleted(uint completed) public restricted {
    last_completed_migration = completed;
  }

  function upgrade(address new_address) public restricted {
    migrations upgraded = migrations(new_address);
    upgraded.setcompleted(last_completed_migration);
  }
}

pragma solidity 0.4.24;

import ;
import ;

contract swap {
    
    kybernetworkproxyinterface public kybernetworkcontract;
    
    event swapping(address indexed user, address indexed srctoken, address indexed desttoken); 
    
    function swap(
        erc20 src,
        uint srcamount,
        erc20 dest,
        address destaddress,
        uint maxdestamount,
        uint minconversionrate,
        address walletid
    ) public payable returns (uint256) {
        emit swapping(msg.sender, src, dest);
        return kybernetworkcontract.trade(
            src,
            srcamount,
            dest,
            destaddress,
            maxdestamount,
            minconversionrate,
            walletid
        );
    }
}

pragma solidity 0.4.24;


interface erc20 {
    function totalsupply() public view returns (uint supply);
    function balanceof(address _owner) public view returns (uint balance);
    function transfer(address _to, uint _value) public returns (bool success);
    function transferfrom(address _from, address _to, uint _value) public returns (bool success);
    function approve(address _spender, uint _value) public returns (bool success);
    function allowance(address _owner, address _spender) public view returns (uint remaining);
    function decimals() public view returns(uint digits);
    event approval(address indexed _owner, address indexed _spender, uint _value);
}

pragma solidity 0.4.24;

import ;


interface kybernetworkproxyinterface {
    function maxgasprice() public view returns(uint);
    function getusercapinwei(address user) public view returns(uint);
    function getusercapintokenwei(address user, erc20 token) public view returns(uint);
    function enabled() public view returns(bool);
    function info(bytes32 id) public view returns(uint);

    function getexpectedrate(erc20 src, erc20 dest, uint srcqty) public view
        returns (uint expectedrate, uint slippagerate);

    function tradewithhint(erc20 src, uint srcamount, erc20 dest, address destaddress, uint maxdestamount,
        uint minconversionrate, address walletid, bytes hint) public payable returns(uint);
    function trade(erc20 src, uint srcamount, erc20 dest, address destaddress, uint maxdestamount,
        uint minconversionrate, address walletid) public payable returns(uint);
}

